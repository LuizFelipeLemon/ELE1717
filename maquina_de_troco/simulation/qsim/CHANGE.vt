// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/24/2019 16:55:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CHANGE
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CHANGE_vlg_sample_tst(
	bns,
	clkM,
	clr_count,
	sampler_tx
);
input  bns;
input  clkM;
input  clr_count;
output sampler_tx;

reg sample;
time current_time;
always @(bns or clkM or clr_count)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CHANGE_vlg_check_tst (
	a,
	addro,
	b,
	c,
	clkout,
	d,
	e,
	hex0,
	hex1,
	hex2,
	led1,
	led2,
	o,
	sampler_rx
);
input  a;
input [3:0] addro;
input  b;
input  c;
input  clkout;
input  d;
input  e;
input [6:0] hex0;
input [6:0] hex1;
input [6:0] hex2;
input  led1;
input  led2;
input  o;
input sampler_rx;

reg  a_expected;
reg [3:0] addro_expected;
reg  b_expected;
reg  c_expected;
reg  clkout_expected;
reg  d_expected;
reg  e_expected;
reg [6:0] hex0_expected;
reg [6:0] hex1_expected;
reg [6:0] hex2_expected;
reg  led1_expected;
reg  led2_expected;
reg  o_expected;

reg  a_prev;
reg [3:0] addro_prev;
reg  b_prev;
reg  c_prev;
reg  clkout_prev;
reg  d_prev;
reg  e_prev;
reg [6:0] hex0_prev;
reg [6:0] hex1_prev;
reg [6:0] hex2_prev;
reg  led1_prev;
reg  led2_prev;
reg  o_prev;

reg  led1_expected_prev;
reg  led2_expected_prev;

reg  last_led1_exp;
reg  last_led2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:13] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 13'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	addro_prev = addro;
	b_prev = b;
	c_prev = c;
	clkout_prev = clkout;
	d_prev = d;
	e_prev = e;
	hex0_prev = hex0;
	hex1_prev = hex1;
	hex2_prev = hex2;
	led1_prev = led1;
	led2_prev = led2;
	o_prev = o;
end

// update expected /o prevs

always @(trigger)
begin
	led1_expected_prev = led1_expected;
	led2_expected_prev = led2_expected;
end



// expected led1
initial
begin
	led1_expected = 1'bX;
	led1_expected = #999000 1'b0;
end 

// expected led2
initial
begin
	led2_expected = 1'bX;
	led2_expected = #999000 1'b0;
end 
// generate trigger
always @(a_expected or a or addro_expected or addro or b_expected or b or c_expected or c or clkout_expected or clkout or d_expected or d or e_expected or e or hex0_expected or hex0 or hex1_expected or hex1 or hex2_expected or hex2 or led1_expected or led1 or led2_expected or led2 or o_expected or o)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected addro = %b | expected b = %b | expected c = %b | expected clkout = %b | expected d = %b | expected e = %b | expected hex0 = %b | expected hex1 = %b | expected hex2 = %b | expected led1 = %b | expected led2 = %b | expected o = %b | ",a_expected_prev,addro_expected_prev,b_expected_prev,c_expected_prev,clkout_expected_prev,d_expected_prev,e_expected_prev,hex0_expected_prev,hex1_expected_prev,hex2_expected_prev,led1_expected_prev,led2_expected_prev,o_expected_prev);
	$display("| real a = %b | real addro = %b | real b = %b | real c = %b | real clkout = %b | real d = %b | real e = %b | real hex0 = %b | real hex1 = %b | real hex2 = %b | real led1 = %b | real led2 = %b | real o = %b | ",a_prev,addro_prev,b_prev,c_prev,clkout_prev,d_prev,e_prev,hex0_prev,hex1_prev,hex2_prev,led1_prev,led2_prev,o_prev);
`endif
	if (
		( led1_expected_prev !== 1'bx ) && ( led1_prev !== led1_expected_prev )
		&& ((led1_expected_prev !== last_led1_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led1_expected_prev);
		$display ("     Real value = %b", led1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_led1_exp = led1_expected_prev;
	end
	if (
		( led2_expected_prev !== 1'bx ) && ( led2_prev !== led2_expected_prev )
		&& ((led2_expected_prev !== last_led2_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led2_expected_prev);
		$display ("     Real value = %b", led2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_led2_exp = led2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CHANGE_vlg_vec_tst();
// constants                                           
// general purpose registers
reg bns;
reg clkM;
reg clr_count;
// wires                                               
wire a;
wire [3:0] addro;
wire b;
wire c;
wire clkout;
wire d;
wire e;
wire [6:0] hex0;
wire [6:0] hex1;
wire [6:0] hex2;
wire led1;
wire led2;
wire o;

wire sampler;                             

// assign statements (if any)                          
CHANGE i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.addro(addro),
	.b(b),
	.bns(bns),
	.c(c),
	.clkM(clkM),
	.clkout(clkout),
	.clr_count(clr_count),
	.d(d),
	.e(e),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.led1(led1),
	.led2(led2),
	.o(o)
);

CHANGE_vlg_sample_tst tb_sample (
	.bns(bns),
	.clkM(clkM),
	.clr_count(clr_count),
	.sampler_tx(sampler)
);

CHANGE_vlg_check_tst tb_out(
	.a(a),
	.addro(addro),
	.b(b),
	.c(c),
	.clkout(clkout),
	.d(d),
	.e(e),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.led1(led1),
	.led2(led2),
	.o(o),
	.sampler_rx(sampler)
);
endmodule

