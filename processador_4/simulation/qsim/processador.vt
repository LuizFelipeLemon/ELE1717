// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/11/2019 19:33:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processador_vlg_sample_tst(
	addr_in,
	clk,
	r,
	sampler_tx
);
input [7:0] addr_in;
input  clk;
input  r;
output sampler_tx;

reg sample;
time current_time;
always @(addr_in or clk or r)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processador_vlg_check_tst (
	alu_s0_t,
	D_addr_t,
	D_rd_t,
	D_wr_t,
	hex0,
	hex1,
	hex2,
	hex3,
	I_rd_t,
	R_data_t,
	RAM_W_data_t,
	RF_Rp_addr_t,
	RF_Rp_rd_t,
	RF_Rq_addr_t,
	RF_Rq_rd_t,
	RF_s_t,
	RF_W_addr_t,
	RF_W_wr_t,
	rom_addr_t,
	rom_data_t,
	rom_rd_t,
	sampler_rx
);
input  alu_s0_t;
input [7:0] D_addr_t;
input  D_rd_t;
input  D_wr_t;
input [6:0] hex0;
input [6:0] hex1;
input [6:0] hex2;
input [6:0] hex3;
input  I_rd_t;
input [15:0] R_data_t;
input [15:0] RAM_W_data_t;
input [3:0] RF_Rp_addr_t;
input  RF_Rp_rd_t;
input [3:0] RF_Rq_addr_t;
input  RF_Rq_rd_t;
input  RF_s_t;
input [3:0] RF_W_addr_t;
input  RF_W_wr_t;
input [7:0] rom_addr_t;
input [15:0] rom_data_t;
input  rom_rd_t;
input sampler_rx;

reg  alu_s0_t_expected;
reg [7:0] D_addr_t_expected;
reg  D_rd_t_expected;
reg  D_wr_t_expected;
reg [6:0] hex0_expected;
reg [6:0] hex1_expected;
reg [6:0] hex2_expected;
reg [6:0] hex3_expected;
reg  I_rd_t_expected;
reg [15:0] R_data_t_expected;
reg [15:0] RAM_W_data_t_expected;
reg [3:0] RF_Rp_addr_t_expected;
reg  RF_Rp_rd_t_expected;
reg [3:0] RF_Rq_addr_t_expected;
reg  RF_Rq_rd_t_expected;
reg  RF_s_t_expected;
reg [3:0] RF_W_addr_t_expected;
reg  RF_W_wr_t_expected;
reg [7:0] rom_addr_t_expected;
reg [15:0] rom_data_t_expected;
reg  rom_rd_t_expected;

reg  alu_s0_t_prev;
reg [7:0] D_addr_t_prev;
reg  D_rd_t_prev;
reg  D_wr_t_prev;
reg [6:0] hex0_prev;
reg [6:0] hex1_prev;
reg [6:0] hex2_prev;
reg [6:0] hex3_prev;
reg  I_rd_t_prev;
reg [15:0] R_data_t_prev;
reg [15:0] RAM_W_data_t_prev;
reg [3:0] RF_Rp_addr_t_prev;
reg  RF_Rp_rd_t_prev;
reg [3:0] RF_Rq_addr_t_prev;
reg  RF_Rq_rd_t_prev;
reg  RF_s_t_prev;
reg [3:0] RF_W_addr_t_prev;
reg  RF_W_wr_t_prev;
reg [7:0] rom_addr_t_prev;
reg [15:0] rom_data_t_prev;
reg  rom_rd_t_prev;

reg  alu_s0_t_expected_prev;
reg [7:0] D_addr_t_expected_prev;
reg  D_rd_t_expected_prev;
reg  D_wr_t_expected_prev;
reg  I_rd_t_expected_prev;
reg [15:0] R_data_t_expected_prev;
reg [15:0] RAM_W_data_t_expected_prev;
reg [3:0] RF_Rp_addr_t_expected_prev;
reg  RF_Rp_rd_t_expected_prev;
reg [3:0] RF_Rq_addr_t_expected_prev;
reg  RF_Rq_rd_t_expected_prev;
reg  RF_s_t_expected_prev;
reg [3:0] RF_W_addr_t_expected_prev;
reg  RF_W_wr_t_expected_prev;
reg [7:0] rom_addr_t_expected_prev;
reg [15:0] rom_data_t_expected_prev;
reg  rom_rd_t_expected_prev;

reg  last_alu_s0_t_exp;
reg [7:0] last_D_addr_t_exp;
reg  last_D_rd_t_exp;
reg  last_D_wr_t_exp;
reg  last_I_rd_t_exp;
reg [15:0] last_R_data_t_exp;
reg [15:0] last_RAM_W_data_t_exp;
reg [3:0] last_RF_Rp_addr_t_exp;
reg  last_RF_Rp_rd_t_exp;
reg [3:0] last_RF_Rq_addr_t_exp;
reg  last_RF_Rq_rd_t_exp;
reg  last_RF_s_t_exp;
reg [3:0] last_RF_W_addr_t_exp;
reg  last_RF_W_wr_t_exp;
reg [7:0] last_rom_addr_t_exp;
reg [15:0] last_rom_data_t_exp;
reg  last_rom_rd_t_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:21] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 21'b1;
end

// update real /o prevs

always @(trigger)
begin
	alu_s0_t_prev = alu_s0_t;
	D_addr_t_prev = D_addr_t;
	D_rd_t_prev = D_rd_t;
	D_wr_t_prev = D_wr_t;
	hex0_prev = hex0;
	hex1_prev = hex1;
	hex2_prev = hex2;
	hex3_prev = hex3;
	I_rd_t_prev = I_rd_t;
	R_data_t_prev = R_data_t;
	RAM_W_data_t_prev = RAM_W_data_t;
	RF_Rp_addr_t_prev = RF_Rp_addr_t;
	RF_Rp_rd_t_prev = RF_Rp_rd_t;
	RF_Rq_addr_t_prev = RF_Rq_addr_t;
	RF_Rq_rd_t_prev = RF_Rq_rd_t;
	RF_s_t_prev = RF_s_t;
	RF_W_addr_t_prev = RF_W_addr_t;
	RF_W_wr_t_prev = RF_W_wr_t;
	rom_addr_t_prev = rom_addr_t;
	rom_data_t_prev = rom_data_t;
	rom_rd_t_prev = rom_rd_t;
end

// update expected /o prevs

always @(trigger)
begin
	alu_s0_t_expected_prev = alu_s0_t_expected;
	D_addr_t_expected_prev = D_addr_t_expected;
	D_rd_t_expected_prev = D_rd_t_expected;
	D_wr_t_expected_prev = D_wr_t_expected;
	I_rd_t_expected_prev = I_rd_t_expected;
	R_data_t_expected_prev = R_data_t_expected;
	RAM_W_data_t_expected_prev = RAM_W_data_t_expected;
	RF_Rp_addr_t_expected_prev = RF_Rp_addr_t_expected;
	RF_Rp_rd_t_expected_prev = RF_Rp_rd_t_expected;
	RF_Rq_addr_t_expected_prev = RF_Rq_addr_t_expected;
	RF_Rq_rd_t_expected_prev = RF_Rq_rd_t_expected;
	RF_s_t_expected_prev = RF_s_t_expected;
	RF_W_addr_t_expected_prev = RF_W_addr_t_expected;
	RF_W_wr_t_expected_prev = RF_W_wr_t_expected;
	rom_addr_t_expected_prev = rom_addr_t_expected;
	rom_data_t_expected_prev = rom_data_t_expected;
	rom_rd_t_expected_prev = rom_rd_t_expected;
end


// expected R_data_t[ 15 ]
initial
begin
	R_data_t_expected[15] = 1'bX;
	R_data_t_expected[15] = #999000 1'b0;
end 
// expected R_data_t[ 14 ]
initial
begin
	R_data_t_expected[14] = 1'bX;
	R_data_t_expected[14] = #999000 1'b0;
end 
// expected R_data_t[ 13 ]
initial
begin
	R_data_t_expected[13] = 1'bX;
	R_data_t_expected[13] = #999000 1'b0;
end 
// expected R_data_t[ 12 ]
initial
begin
	R_data_t_expected[12] = 1'bX;
	R_data_t_expected[12] = #999000 1'b0;
end 
// expected R_data_t[ 11 ]
initial
begin
	R_data_t_expected[11] = 1'bX;
	R_data_t_expected[11] = #999000 1'b0;
end 
// expected R_data_t[ 10 ]
initial
begin
	R_data_t_expected[10] = 1'bX;
	R_data_t_expected[10] = #999000 1'b0;
end 
// expected R_data_t[ 9 ]
initial
begin
	R_data_t_expected[9] = 1'bX;
	R_data_t_expected[9] = #999000 1'b0;
end 
// expected R_data_t[ 8 ]
initial
begin
	R_data_t_expected[8] = 1'bX;
	R_data_t_expected[8] = #999000 1'b0;
end 
// expected R_data_t[ 7 ]
initial
begin
	R_data_t_expected[7] = 1'bX;
	R_data_t_expected[7] = #999000 1'b0;
end 
// expected R_data_t[ 6 ]
initial
begin
	R_data_t_expected[6] = 1'bX;
	R_data_t_expected[6] = #999000 1'b0;
end 
// expected R_data_t[ 5 ]
initial
begin
	R_data_t_expected[5] = 1'bX;
	R_data_t_expected[5] = #999000 1'b0;
end 
// expected R_data_t[ 4 ]
initial
begin
	R_data_t_expected[4] = 1'bX;
	R_data_t_expected[4] = #999000 1'b0;
end 
// expected R_data_t[ 3 ]
initial
begin
	R_data_t_expected[3] = 1'bX;
	R_data_t_expected[3] = #999000 1'b0;
end 
// expected R_data_t[ 2 ]
initial
begin
	R_data_t_expected[2] = 1'bX;
	R_data_t_expected[2] = #999000 1'b0;
end 
// expected R_data_t[ 1 ]
initial
begin
	R_data_t_expected[1] = 1'bX;
	R_data_t_expected[1] = #999000 1'b0;
end 
// expected R_data_t[ 0 ]
initial
begin
	R_data_t_expected[0] = 1'bX;
	R_data_t_expected[0] = #999000 1'b0;
end 
// expected D_addr_t[ 7 ]
initial
begin
	D_addr_t_expected[7] = 1'bX;
	D_addr_t_expected[7] = #999000 1'b0;
end 
// expected D_addr_t[ 6 ]
initial
begin
	D_addr_t_expected[6] = 1'bX;
	D_addr_t_expected[6] = #999000 1'b0;
end 
// expected D_addr_t[ 5 ]
initial
begin
	D_addr_t_expected[5] = 1'bX;
	D_addr_t_expected[5] = #999000 1'b0;
end 
// expected D_addr_t[ 4 ]
initial
begin
	D_addr_t_expected[4] = 1'bX;
	D_addr_t_expected[4] = #999000 1'b0;
end 
// expected D_addr_t[ 3 ]
initial
begin
	D_addr_t_expected[3] = 1'bX;
	D_addr_t_expected[3] = #999000 1'b0;
end 
// expected D_addr_t[ 2 ]
initial
begin
	D_addr_t_expected[2] = 1'bX;
	D_addr_t_expected[2] = #999000 1'b0;
end 
// expected D_addr_t[ 1 ]
initial
begin
	D_addr_t_expected[1] = 1'bX;
	D_addr_t_expected[1] = #999000 1'b0;
end 
// expected D_addr_t[ 0 ]
initial
begin
	D_addr_t_expected[0] = 1'bX;
	D_addr_t_expected[0] = #999000 1'b0;
end 

// expected D_rd_t
initial
begin
	D_rd_t_expected = 1'bX;
	D_rd_t_expected = #999000 1'b0;
end 

// expected D_wr_t
initial
begin
	D_wr_t_expected = 1'bX;
	D_wr_t_expected = #999000 1'b0;
end 

// expected RF_s_t
initial
begin
	RF_s_t_expected = 1'bX;
	RF_s_t_expected = #999000 1'b0;
end 
// expected RF_W_addr_t[ 3 ]
initial
begin
	RF_W_addr_t_expected[3] = 1'bX;
	RF_W_addr_t_expected[3] = #999000 1'b0;
end 
// expected RF_W_addr_t[ 2 ]
initial
begin
	RF_W_addr_t_expected[2] = 1'bX;
	RF_W_addr_t_expected[2] = #999000 1'b0;
end 
// expected RF_W_addr_t[ 1 ]
initial
begin
	RF_W_addr_t_expected[1] = 1'bX;
	RF_W_addr_t_expected[1] = #999000 1'b0;
end 
// expected RF_W_addr_t[ 0 ]
initial
begin
	RF_W_addr_t_expected[0] = 1'bX;
	RF_W_addr_t_expected[0] = #999000 1'b0;
end 

// expected RF_W_wr_t
initial
begin
	RF_W_wr_t_expected = 1'bX;
	RF_W_wr_t_expected = #999000 1'b0;
end 
// expected RF_Rp_addr_t[ 3 ]
initial
begin
	RF_Rp_addr_t_expected[3] = 1'bX;
	RF_Rp_addr_t_expected[3] = #999000 1'b0;
end 
// expected RF_Rp_addr_t[ 2 ]
initial
begin
	RF_Rp_addr_t_expected[2] = 1'bX;
	RF_Rp_addr_t_expected[2] = #999000 1'b0;
end 
// expected RF_Rp_addr_t[ 1 ]
initial
begin
	RF_Rp_addr_t_expected[1] = 1'bX;
	RF_Rp_addr_t_expected[1] = #999000 1'b0;
end 
// expected RF_Rp_addr_t[ 0 ]
initial
begin
	RF_Rp_addr_t_expected[0] = 1'bX;
	RF_Rp_addr_t_expected[0] = #999000 1'b0;
end 

// expected RF_Rp_rd_t
initial
begin
	RF_Rp_rd_t_expected = 1'bX;
	RF_Rp_rd_t_expected = #999000 1'b0;
end 
// expected RF_Rq_addr_t[ 3 ]
initial
begin
	RF_Rq_addr_t_expected[3] = 1'bX;
	RF_Rq_addr_t_expected[3] = #999000 1'b0;
end 
// expected RF_Rq_addr_t[ 2 ]
initial
begin
	RF_Rq_addr_t_expected[2] = 1'bX;
	RF_Rq_addr_t_expected[2] = #999000 1'b0;
end 
// expected RF_Rq_addr_t[ 1 ]
initial
begin
	RF_Rq_addr_t_expected[1] = 1'bX;
	RF_Rq_addr_t_expected[1] = #999000 1'b0;
end 
// expected RF_Rq_addr_t[ 0 ]
initial
begin
	RF_Rq_addr_t_expected[0] = 1'bX;
	RF_Rq_addr_t_expected[0] = #999000 1'b0;
end 

// expected RF_Rq_rd_t
initial
begin
	RF_Rq_rd_t_expected = 1'bX;
	RF_Rq_rd_t_expected = #999000 1'b0;
end 

// expected alu_s0_t
initial
begin
	alu_s0_t_expected = 1'bX;
	alu_s0_t_expected = #999000 1'b0;
end 

// expected I_rd_t
initial
begin
	I_rd_t_expected = 1'bX;
	I_rd_t_expected = #999000 1'b0;
end 
// expected RAM_W_data_t[ 15 ]
initial
begin
	RAM_W_data_t_expected[15] = 1'bX;
	RAM_W_data_t_expected[15] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 14 ]
initial
begin
	RAM_W_data_t_expected[14] = 1'bX;
	RAM_W_data_t_expected[14] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 13 ]
initial
begin
	RAM_W_data_t_expected[13] = 1'bX;
	RAM_W_data_t_expected[13] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 12 ]
initial
begin
	RAM_W_data_t_expected[12] = 1'bX;
	RAM_W_data_t_expected[12] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 11 ]
initial
begin
	RAM_W_data_t_expected[11] = 1'bX;
	RAM_W_data_t_expected[11] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 10 ]
initial
begin
	RAM_W_data_t_expected[10] = 1'bX;
	RAM_W_data_t_expected[10] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 9 ]
initial
begin
	RAM_W_data_t_expected[9] = 1'bX;
	RAM_W_data_t_expected[9] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 8 ]
initial
begin
	RAM_W_data_t_expected[8] = 1'bX;
	RAM_W_data_t_expected[8] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 7 ]
initial
begin
	RAM_W_data_t_expected[7] = 1'bX;
	RAM_W_data_t_expected[7] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 6 ]
initial
begin
	RAM_W_data_t_expected[6] = 1'bX;
	RAM_W_data_t_expected[6] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 5 ]
initial
begin
	RAM_W_data_t_expected[5] = 1'bX;
	RAM_W_data_t_expected[5] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 4 ]
initial
begin
	RAM_W_data_t_expected[4] = 1'bX;
	RAM_W_data_t_expected[4] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 3 ]
initial
begin
	RAM_W_data_t_expected[3] = 1'bX;
	RAM_W_data_t_expected[3] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 2 ]
initial
begin
	RAM_W_data_t_expected[2] = 1'bX;
	RAM_W_data_t_expected[2] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 1 ]
initial
begin
	RAM_W_data_t_expected[1] = 1'bX;
	RAM_W_data_t_expected[1] = #999000 1'b0;
end 
// expected RAM_W_data_t[ 0 ]
initial
begin
	RAM_W_data_t_expected[0] = 1'bX;
	RAM_W_data_t_expected[0] = #999000 1'b0;
end 
// expected rom_addr_t[ 7 ]
initial
begin
	rom_addr_t_expected[7] = 1'bX;
	rom_addr_t_expected[7] = #999000 1'b0;
end 
// expected rom_addr_t[ 6 ]
initial
begin
	rom_addr_t_expected[6] = 1'bX;
	rom_addr_t_expected[6] = #999000 1'b0;
end 
// expected rom_addr_t[ 5 ]
initial
begin
	rom_addr_t_expected[5] = 1'bX;
	rom_addr_t_expected[5] = #999000 1'b0;
end 
// expected rom_addr_t[ 4 ]
initial
begin
	rom_addr_t_expected[4] = 1'bX;
	rom_addr_t_expected[4] = #999000 1'b0;
end 
// expected rom_addr_t[ 3 ]
initial
begin
	rom_addr_t_expected[3] = 1'bX;
	rom_addr_t_expected[3] = #999000 1'b0;
end 
// expected rom_addr_t[ 2 ]
initial
begin
	rom_addr_t_expected[2] = 1'bX;
	rom_addr_t_expected[2] = #999000 1'b0;
end 
// expected rom_addr_t[ 1 ]
initial
begin
	rom_addr_t_expected[1] = 1'bX;
	rom_addr_t_expected[1] = #999000 1'b0;
end 
// expected rom_addr_t[ 0 ]
initial
begin
	rom_addr_t_expected[0] = 1'bX;
	rom_addr_t_expected[0] = #999000 1'b0;
end 
// expected rom_data_t[ 15 ]
initial
begin
	rom_data_t_expected[15] = 1'bX;
	rom_data_t_expected[15] = #999000 1'b0;
end 
// expected rom_data_t[ 14 ]
initial
begin
	rom_data_t_expected[14] = 1'bX;
	rom_data_t_expected[14] = #999000 1'b0;
end 
// expected rom_data_t[ 13 ]
initial
begin
	rom_data_t_expected[13] = 1'bX;
	rom_data_t_expected[13] = #999000 1'b0;
end 
// expected rom_data_t[ 12 ]
initial
begin
	rom_data_t_expected[12] = 1'bX;
	rom_data_t_expected[12] = #999000 1'b0;
end 
// expected rom_data_t[ 11 ]
initial
begin
	rom_data_t_expected[11] = 1'bX;
	rom_data_t_expected[11] = #999000 1'b0;
end 
// expected rom_data_t[ 10 ]
initial
begin
	rom_data_t_expected[10] = 1'bX;
	rom_data_t_expected[10] = #999000 1'b0;
end 
// expected rom_data_t[ 9 ]
initial
begin
	rom_data_t_expected[9] = 1'bX;
	rom_data_t_expected[9] = #999000 1'b0;
end 
// expected rom_data_t[ 8 ]
initial
begin
	rom_data_t_expected[8] = 1'bX;
	rom_data_t_expected[8] = #999000 1'b0;
end 
// expected rom_data_t[ 7 ]
initial
begin
	rom_data_t_expected[7] = 1'bX;
	rom_data_t_expected[7] = #999000 1'b0;
end 
// expected rom_data_t[ 6 ]
initial
begin
	rom_data_t_expected[6] = 1'bX;
	rom_data_t_expected[6] = #999000 1'b0;
end 
// expected rom_data_t[ 5 ]
initial
begin
	rom_data_t_expected[5] = 1'bX;
	rom_data_t_expected[5] = #999000 1'b0;
end 
// expected rom_data_t[ 4 ]
initial
begin
	rom_data_t_expected[4] = 1'bX;
	rom_data_t_expected[4] = #999000 1'b0;
end 
// expected rom_data_t[ 3 ]
initial
begin
	rom_data_t_expected[3] = 1'bX;
	rom_data_t_expected[3] = #999000 1'b0;
end 
// expected rom_data_t[ 2 ]
initial
begin
	rom_data_t_expected[2] = 1'bX;
	rom_data_t_expected[2] = #999000 1'b0;
end 
// expected rom_data_t[ 1 ]
initial
begin
	rom_data_t_expected[1] = 1'bX;
	rom_data_t_expected[1] = #999000 1'b0;
end 
// expected rom_data_t[ 0 ]
initial
begin
	rom_data_t_expected[0] = 1'bX;
	rom_data_t_expected[0] = #999000 1'b0;
end 

// expected rom_rd_t
initial
begin
	rom_rd_t_expected = 1'bX;
	rom_rd_t_expected = #999000 1'b0;
end 
// generate trigger
always @(alu_s0_t_expected or alu_s0_t or D_addr_t_expected or D_addr_t or D_rd_t_expected or D_rd_t or D_wr_t_expected or D_wr_t or hex0_expected or hex0 or hex1_expected or hex1 or hex2_expected or hex2 or hex3_expected or hex3 or I_rd_t_expected or I_rd_t or R_data_t_expected or R_data_t or RAM_W_data_t_expected or RAM_W_data_t or RF_Rp_addr_t_expected or RF_Rp_addr_t or RF_Rp_rd_t_expected or RF_Rp_rd_t or RF_Rq_addr_t_expected or RF_Rq_addr_t or RF_Rq_rd_t_expected or RF_Rq_rd_t or RF_s_t_expected or RF_s_t or RF_W_addr_t_expected or RF_W_addr_t or RF_W_wr_t_expected or RF_W_wr_t or rom_addr_t_expected or rom_addr_t or rom_data_t_expected or rom_data_t or rom_rd_t_expected or rom_rd_t)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alu_s0_t = %b | expected D_addr_t = %b | expected D_rd_t = %b | expected D_wr_t = %b | expected hex0 = %b | expected hex1 = %b | expected hex2 = %b | expected hex3 = %b | expected I_rd_t = %b | expected R_data_t = %b | expected RAM_W_data_t = %b | expected RF_Rp_addr_t = %b | expected RF_Rp_rd_t = %b | expected RF_Rq_addr_t = %b | expected RF_Rq_rd_t = %b | expected RF_s_t = %b | expected RF_W_addr_t = %b | expected RF_W_wr_t = %b | expected rom_addr_t = %b | expected rom_data_t = %b | expected rom_rd_t = %b | ",alu_s0_t_expected_prev,D_addr_t_expected_prev,D_rd_t_expected_prev,D_wr_t_expected_prev,hex0_expected_prev,hex1_expected_prev,hex2_expected_prev,hex3_expected_prev,I_rd_t_expected_prev,R_data_t_expected_prev,RAM_W_data_t_expected_prev,RF_Rp_addr_t_expected_prev,RF_Rp_rd_t_expected_prev,RF_Rq_addr_t_expected_prev,RF_Rq_rd_t_expected_prev,RF_s_t_expected_prev,RF_W_addr_t_expected_prev,RF_W_wr_t_expected_prev,rom_addr_t_expected_prev,rom_data_t_expected_prev,rom_rd_t_expected_prev);
	$display("| real alu_s0_t = %b | real D_addr_t = %b | real D_rd_t = %b | real D_wr_t = %b | real hex0 = %b | real hex1 = %b | real hex2 = %b | real hex3 = %b | real I_rd_t = %b | real R_data_t = %b | real RAM_W_data_t = %b | real RF_Rp_addr_t = %b | real RF_Rp_rd_t = %b | real RF_Rq_addr_t = %b | real RF_Rq_rd_t = %b | real RF_s_t = %b | real RF_W_addr_t = %b | real RF_W_wr_t = %b | real rom_addr_t = %b | real rom_data_t = %b | real rom_rd_t = %b | ",alu_s0_t_prev,D_addr_t_prev,D_rd_t_prev,D_wr_t_prev,hex0_prev,hex1_prev,hex2_prev,hex3_prev,I_rd_t_prev,R_data_t_prev,RAM_W_data_t_prev,RF_Rp_addr_t_prev,RF_Rp_rd_t_prev,RF_Rq_addr_t_prev,RF_Rq_rd_t_prev,RF_s_t_prev,RF_W_addr_t_prev,RF_W_wr_t_prev,rom_addr_t_prev,rom_data_t_prev,rom_rd_t_prev);
`endif
	if (
		( alu_s0_t_expected_prev !== 1'bx ) && ( alu_s0_t_prev !== alu_s0_t_expected_prev )
		&& ((alu_s0_t_expected_prev !== last_alu_s0_t_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_s0_t :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_s0_t_expected_prev);
		$display ("     Real value = %b", alu_s0_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_s0_t_exp = alu_s0_t_expected_prev;
	end
	if (
		( D_addr_t_expected_prev[0] !== 1'bx ) && ( D_addr_t_prev[0] !== D_addr_t_expected_prev[0] )
		&& ((D_addr_t_expected_prev[0] !== last_D_addr_t_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_t_expected_prev);
		$display ("     Real value = %b", D_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_t_exp[0] = D_addr_t_expected_prev[0];
	end
	if (
		( D_addr_t_expected_prev[1] !== 1'bx ) && ( D_addr_t_prev[1] !== D_addr_t_expected_prev[1] )
		&& ((D_addr_t_expected_prev[1] !== last_D_addr_t_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_t_expected_prev);
		$display ("     Real value = %b", D_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_t_exp[1] = D_addr_t_expected_prev[1];
	end
	if (
		( D_addr_t_expected_prev[2] !== 1'bx ) && ( D_addr_t_prev[2] !== D_addr_t_expected_prev[2] )
		&& ((D_addr_t_expected_prev[2] !== last_D_addr_t_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_t_expected_prev);
		$display ("     Real value = %b", D_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_t_exp[2] = D_addr_t_expected_prev[2];
	end
	if (
		( D_addr_t_expected_prev[3] !== 1'bx ) && ( D_addr_t_prev[3] !== D_addr_t_expected_prev[3] )
		&& ((D_addr_t_expected_prev[3] !== last_D_addr_t_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_t_expected_prev);
		$display ("     Real value = %b", D_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_t_exp[3] = D_addr_t_expected_prev[3];
	end
	if (
		( D_addr_t_expected_prev[4] !== 1'bx ) && ( D_addr_t_prev[4] !== D_addr_t_expected_prev[4] )
		&& ((D_addr_t_expected_prev[4] !== last_D_addr_t_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_t[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_t_expected_prev);
		$display ("     Real value = %b", D_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_t_exp[4] = D_addr_t_expected_prev[4];
	end
	if (
		( D_addr_t_expected_prev[5] !== 1'bx ) && ( D_addr_t_prev[5] !== D_addr_t_expected_prev[5] )
		&& ((D_addr_t_expected_prev[5] !== last_D_addr_t_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_t[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_t_expected_prev);
		$display ("     Real value = %b", D_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_t_exp[5] = D_addr_t_expected_prev[5];
	end
	if (
		( D_addr_t_expected_prev[6] !== 1'bx ) && ( D_addr_t_prev[6] !== D_addr_t_expected_prev[6] )
		&& ((D_addr_t_expected_prev[6] !== last_D_addr_t_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_t[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_t_expected_prev);
		$display ("     Real value = %b", D_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_t_exp[6] = D_addr_t_expected_prev[6];
	end
	if (
		( D_addr_t_expected_prev[7] !== 1'bx ) && ( D_addr_t_prev[7] !== D_addr_t_expected_prev[7] )
		&& ((D_addr_t_expected_prev[7] !== last_D_addr_t_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_t[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_t_expected_prev);
		$display ("     Real value = %b", D_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_t_exp[7] = D_addr_t_expected_prev[7];
	end
	if (
		( D_rd_t_expected_prev !== 1'bx ) && ( D_rd_t_prev !== D_rd_t_expected_prev )
		&& ((D_rd_t_expected_prev !== last_D_rd_t_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rd_t :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rd_t_expected_prev);
		$display ("     Real value = %b", D_rd_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_rd_t_exp = D_rd_t_expected_prev;
	end
	if (
		( D_wr_t_expected_prev !== 1'bx ) && ( D_wr_t_prev !== D_wr_t_expected_prev )
		&& ((D_wr_t_expected_prev !== last_D_wr_t_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_wr_t :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_wr_t_expected_prev);
		$display ("     Real value = %b", D_wr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_wr_t_exp = D_wr_t_expected_prev;
	end
	if (
		( I_rd_t_expected_prev !== 1'bx ) && ( I_rd_t_prev !== I_rd_t_expected_prev )
		&& ((I_rd_t_expected_prev !== last_I_rd_t_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_rd_t :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_rd_t_expected_prev);
		$display ("     Real value = %b", I_rd_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_I_rd_t_exp = I_rd_t_expected_prev;
	end
	if (
		( R_data_t_expected_prev[0] !== 1'bx ) && ( R_data_t_prev[0] !== R_data_t_expected_prev[0] )
		&& ((R_data_t_expected_prev[0] !== last_R_data_t_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[0] = R_data_t_expected_prev[0];
	end
	if (
		( R_data_t_expected_prev[1] !== 1'bx ) && ( R_data_t_prev[1] !== R_data_t_expected_prev[1] )
		&& ((R_data_t_expected_prev[1] !== last_R_data_t_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[1] = R_data_t_expected_prev[1];
	end
	if (
		( R_data_t_expected_prev[2] !== 1'bx ) && ( R_data_t_prev[2] !== R_data_t_expected_prev[2] )
		&& ((R_data_t_expected_prev[2] !== last_R_data_t_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[2] = R_data_t_expected_prev[2];
	end
	if (
		( R_data_t_expected_prev[3] !== 1'bx ) && ( R_data_t_prev[3] !== R_data_t_expected_prev[3] )
		&& ((R_data_t_expected_prev[3] !== last_R_data_t_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[3] = R_data_t_expected_prev[3];
	end
	if (
		( R_data_t_expected_prev[4] !== 1'bx ) && ( R_data_t_prev[4] !== R_data_t_expected_prev[4] )
		&& ((R_data_t_expected_prev[4] !== last_R_data_t_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[4] = R_data_t_expected_prev[4];
	end
	if (
		( R_data_t_expected_prev[5] !== 1'bx ) && ( R_data_t_prev[5] !== R_data_t_expected_prev[5] )
		&& ((R_data_t_expected_prev[5] !== last_R_data_t_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[5] = R_data_t_expected_prev[5];
	end
	if (
		( R_data_t_expected_prev[6] !== 1'bx ) && ( R_data_t_prev[6] !== R_data_t_expected_prev[6] )
		&& ((R_data_t_expected_prev[6] !== last_R_data_t_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[6] = R_data_t_expected_prev[6];
	end
	if (
		( R_data_t_expected_prev[7] !== 1'bx ) && ( R_data_t_prev[7] !== R_data_t_expected_prev[7] )
		&& ((R_data_t_expected_prev[7] !== last_R_data_t_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[7] = R_data_t_expected_prev[7];
	end
	if (
		( R_data_t_expected_prev[8] !== 1'bx ) && ( R_data_t_prev[8] !== R_data_t_expected_prev[8] )
		&& ((R_data_t_expected_prev[8] !== last_R_data_t_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[8] = R_data_t_expected_prev[8];
	end
	if (
		( R_data_t_expected_prev[9] !== 1'bx ) && ( R_data_t_prev[9] !== R_data_t_expected_prev[9] )
		&& ((R_data_t_expected_prev[9] !== last_R_data_t_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[9] = R_data_t_expected_prev[9];
	end
	if (
		( R_data_t_expected_prev[10] !== 1'bx ) && ( R_data_t_prev[10] !== R_data_t_expected_prev[10] )
		&& ((R_data_t_expected_prev[10] !== last_R_data_t_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[10] = R_data_t_expected_prev[10];
	end
	if (
		( R_data_t_expected_prev[11] !== 1'bx ) && ( R_data_t_prev[11] !== R_data_t_expected_prev[11] )
		&& ((R_data_t_expected_prev[11] !== last_R_data_t_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[11] = R_data_t_expected_prev[11];
	end
	if (
		( R_data_t_expected_prev[12] !== 1'bx ) && ( R_data_t_prev[12] !== R_data_t_expected_prev[12] )
		&& ((R_data_t_expected_prev[12] !== last_R_data_t_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[12] = R_data_t_expected_prev[12];
	end
	if (
		( R_data_t_expected_prev[13] !== 1'bx ) && ( R_data_t_prev[13] !== R_data_t_expected_prev[13] )
		&& ((R_data_t_expected_prev[13] !== last_R_data_t_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[13] = R_data_t_expected_prev[13];
	end
	if (
		( R_data_t_expected_prev[14] !== 1'bx ) && ( R_data_t_prev[14] !== R_data_t_expected_prev[14] )
		&& ((R_data_t_expected_prev[14] !== last_R_data_t_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[14] = R_data_t_expected_prev[14];
	end
	if (
		( R_data_t_expected_prev[15] !== 1'bx ) && ( R_data_t_prev[15] !== R_data_t_expected_prev[15] )
		&& ((R_data_t_expected_prev[15] !== last_R_data_t_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_t[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_t_expected_prev);
		$display ("     Real value = %b", R_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R_data_t_exp[15] = R_data_t_expected_prev[15];
	end
	if (
		( RAM_W_data_t_expected_prev[0] !== 1'bx ) && ( RAM_W_data_t_prev[0] !== RAM_W_data_t_expected_prev[0] )
		&& ((RAM_W_data_t_expected_prev[0] !== last_RAM_W_data_t_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[0] = RAM_W_data_t_expected_prev[0];
	end
	if (
		( RAM_W_data_t_expected_prev[1] !== 1'bx ) && ( RAM_W_data_t_prev[1] !== RAM_W_data_t_expected_prev[1] )
		&& ((RAM_W_data_t_expected_prev[1] !== last_RAM_W_data_t_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[1] = RAM_W_data_t_expected_prev[1];
	end
	if (
		( RAM_W_data_t_expected_prev[2] !== 1'bx ) && ( RAM_W_data_t_prev[2] !== RAM_W_data_t_expected_prev[2] )
		&& ((RAM_W_data_t_expected_prev[2] !== last_RAM_W_data_t_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[2] = RAM_W_data_t_expected_prev[2];
	end
	if (
		( RAM_W_data_t_expected_prev[3] !== 1'bx ) && ( RAM_W_data_t_prev[3] !== RAM_W_data_t_expected_prev[3] )
		&& ((RAM_W_data_t_expected_prev[3] !== last_RAM_W_data_t_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[3] = RAM_W_data_t_expected_prev[3];
	end
	if (
		( RAM_W_data_t_expected_prev[4] !== 1'bx ) && ( RAM_W_data_t_prev[4] !== RAM_W_data_t_expected_prev[4] )
		&& ((RAM_W_data_t_expected_prev[4] !== last_RAM_W_data_t_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[4] = RAM_W_data_t_expected_prev[4];
	end
	if (
		( RAM_W_data_t_expected_prev[5] !== 1'bx ) && ( RAM_W_data_t_prev[5] !== RAM_W_data_t_expected_prev[5] )
		&& ((RAM_W_data_t_expected_prev[5] !== last_RAM_W_data_t_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[5] = RAM_W_data_t_expected_prev[5];
	end
	if (
		( RAM_W_data_t_expected_prev[6] !== 1'bx ) && ( RAM_W_data_t_prev[6] !== RAM_W_data_t_expected_prev[6] )
		&& ((RAM_W_data_t_expected_prev[6] !== last_RAM_W_data_t_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[6] = RAM_W_data_t_expected_prev[6];
	end
	if (
		( RAM_W_data_t_expected_prev[7] !== 1'bx ) && ( RAM_W_data_t_prev[7] !== RAM_W_data_t_expected_prev[7] )
		&& ((RAM_W_data_t_expected_prev[7] !== last_RAM_W_data_t_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[7] = RAM_W_data_t_expected_prev[7];
	end
	if (
		( RAM_W_data_t_expected_prev[8] !== 1'bx ) && ( RAM_W_data_t_prev[8] !== RAM_W_data_t_expected_prev[8] )
		&& ((RAM_W_data_t_expected_prev[8] !== last_RAM_W_data_t_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[8] = RAM_W_data_t_expected_prev[8];
	end
	if (
		( RAM_W_data_t_expected_prev[9] !== 1'bx ) && ( RAM_W_data_t_prev[9] !== RAM_W_data_t_expected_prev[9] )
		&& ((RAM_W_data_t_expected_prev[9] !== last_RAM_W_data_t_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[9] = RAM_W_data_t_expected_prev[9];
	end
	if (
		( RAM_W_data_t_expected_prev[10] !== 1'bx ) && ( RAM_W_data_t_prev[10] !== RAM_W_data_t_expected_prev[10] )
		&& ((RAM_W_data_t_expected_prev[10] !== last_RAM_W_data_t_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[10] = RAM_W_data_t_expected_prev[10];
	end
	if (
		( RAM_W_data_t_expected_prev[11] !== 1'bx ) && ( RAM_W_data_t_prev[11] !== RAM_W_data_t_expected_prev[11] )
		&& ((RAM_W_data_t_expected_prev[11] !== last_RAM_W_data_t_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[11] = RAM_W_data_t_expected_prev[11];
	end
	if (
		( RAM_W_data_t_expected_prev[12] !== 1'bx ) && ( RAM_W_data_t_prev[12] !== RAM_W_data_t_expected_prev[12] )
		&& ((RAM_W_data_t_expected_prev[12] !== last_RAM_W_data_t_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[12] = RAM_W_data_t_expected_prev[12];
	end
	if (
		( RAM_W_data_t_expected_prev[13] !== 1'bx ) && ( RAM_W_data_t_prev[13] !== RAM_W_data_t_expected_prev[13] )
		&& ((RAM_W_data_t_expected_prev[13] !== last_RAM_W_data_t_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[13] = RAM_W_data_t_expected_prev[13];
	end
	if (
		( RAM_W_data_t_expected_prev[14] !== 1'bx ) && ( RAM_W_data_t_prev[14] !== RAM_W_data_t_expected_prev[14] )
		&& ((RAM_W_data_t_expected_prev[14] !== last_RAM_W_data_t_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[14] = RAM_W_data_t_expected_prev[14];
	end
	if (
		( RAM_W_data_t_expected_prev[15] !== 1'bx ) && ( RAM_W_data_t_prev[15] !== RAM_W_data_t_expected_prev[15] )
		&& ((RAM_W_data_t_expected_prev[15] !== last_RAM_W_data_t_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_W_data_t[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_W_data_t_expected_prev);
		$display ("     Real value = %b", RAM_W_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RAM_W_data_t_exp[15] = RAM_W_data_t_expected_prev[15];
	end
	if (
		( RF_Rp_addr_t_expected_prev[0] !== 1'bx ) && ( RF_Rp_addr_t_prev[0] !== RF_Rp_addr_t_expected_prev[0] )
		&& ((RF_Rp_addr_t_expected_prev[0] !== last_RF_Rp_addr_t_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_t_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_Rp_addr_t_exp[0] = RF_Rp_addr_t_expected_prev[0];
	end
	if (
		( RF_Rp_addr_t_expected_prev[1] !== 1'bx ) && ( RF_Rp_addr_t_prev[1] !== RF_Rp_addr_t_expected_prev[1] )
		&& ((RF_Rp_addr_t_expected_prev[1] !== last_RF_Rp_addr_t_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_t_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_Rp_addr_t_exp[1] = RF_Rp_addr_t_expected_prev[1];
	end
	if (
		( RF_Rp_addr_t_expected_prev[2] !== 1'bx ) && ( RF_Rp_addr_t_prev[2] !== RF_Rp_addr_t_expected_prev[2] )
		&& ((RF_Rp_addr_t_expected_prev[2] !== last_RF_Rp_addr_t_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_t_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_Rp_addr_t_exp[2] = RF_Rp_addr_t_expected_prev[2];
	end
	if (
		( RF_Rp_addr_t_expected_prev[3] !== 1'bx ) && ( RF_Rp_addr_t_prev[3] !== RF_Rp_addr_t_expected_prev[3] )
		&& ((RF_Rp_addr_t_expected_prev[3] !== last_RF_Rp_addr_t_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_t_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_Rp_addr_t_exp[3] = RF_Rp_addr_t_expected_prev[3];
	end
	if (
		( RF_Rp_rd_t_expected_prev !== 1'bx ) && ( RF_Rp_rd_t_prev !== RF_Rp_rd_t_expected_prev )
		&& ((RF_Rp_rd_t_expected_prev !== last_RF_Rp_rd_t_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_rd_t :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_rd_t_expected_prev);
		$display ("     Real value = %b", RF_Rp_rd_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_Rp_rd_t_exp = RF_Rp_rd_t_expected_prev;
	end
	if (
		( RF_Rq_addr_t_expected_prev[0] !== 1'bx ) && ( RF_Rq_addr_t_prev[0] !== RF_Rq_addr_t_expected_prev[0] )
		&& ((RF_Rq_addr_t_expected_prev[0] !== last_RF_Rq_addr_t_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_t_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_Rq_addr_t_exp[0] = RF_Rq_addr_t_expected_prev[0];
	end
	if (
		( RF_Rq_addr_t_expected_prev[1] !== 1'bx ) && ( RF_Rq_addr_t_prev[1] !== RF_Rq_addr_t_expected_prev[1] )
		&& ((RF_Rq_addr_t_expected_prev[1] !== last_RF_Rq_addr_t_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_t_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_Rq_addr_t_exp[1] = RF_Rq_addr_t_expected_prev[1];
	end
	if (
		( RF_Rq_addr_t_expected_prev[2] !== 1'bx ) && ( RF_Rq_addr_t_prev[2] !== RF_Rq_addr_t_expected_prev[2] )
		&& ((RF_Rq_addr_t_expected_prev[2] !== last_RF_Rq_addr_t_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_t_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_Rq_addr_t_exp[2] = RF_Rq_addr_t_expected_prev[2];
	end
	if (
		( RF_Rq_addr_t_expected_prev[3] !== 1'bx ) && ( RF_Rq_addr_t_prev[3] !== RF_Rq_addr_t_expected_prev[3] )
		&& ((RF_Rq_addr_t_expected_prev[3] !== last_RF_Rq_addr_t_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_t_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_Rq_addr_t_exp[3] = RF_Rq_addr_t_expected_prev[3];
	end
	if (
		( RF_Rq_rd_t_expected_prev !== 1'bx ) && ( RF_Rq_rd_t_prev !== RF_Rq_rd_t_expected_prev )
		&& ((RF_Rq_rd_t_expected_prev !== last_RF_Rq_rd_t_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_rd_t :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_rd_t_expected_prev);
		$display ("     Real value = %b", RF_Rq_rd_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_Rq_rd_t_exp = RF_Rq_rd_t_expected_prev;
	end
	if (
		( RF_s_t_expected_prev !== 1'bx ) && ( RF_s_t_prev !== RF_s_t_expected_prev )
		&& ((RF_s_t_expected_prev !== last_RF_s_t_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_s_t :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_s_t_expected_prev);
		$display ("     Real value = %b", RF_s_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RF_s_t_exp = RF_s_t_expected_prev;
	end
	if (
		( RF_W_addr_t_expected_prev[0] !== 1'bx ) && ( RF_W_addr_t_prev[0] !== RF_W_addr_t_expected_prev[0] )
		&& ((RF_W_addr_t_expected_prev[0] !== last_RF_W_addr_t_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_t_expected_prev);
		$display ("     Real value = %b", RF_W_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_W_addr_t_exp[0] = RF_W_addr_t_expected_prev[0];
	end
	if (
		( RF_W_addr_t_expected_prev[1] !== 1'bx ) && ( RF_W_addr_t_prev[1] !== RF_W_addr_t_expected_prev[1] )
		&& ((RF_W_addr_t_expected_prev[1] !== last_RF_W_addr_t_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_t_expected_prev);
		$display ("     Real value = %b", RF_W_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_W_addr_t_exp[1] = RF_W_addr_t_expected_prev[1];
	end
	if (
		( RF_W_addr_t_expected_prev[2] !== 1'bx ) && ( RF_W_addr_t_prev[2] !== RF_W_addr_t_expected_prev[2] )
		&& ((RF_W_addr_t_expected_prev[2] !== last_RF_W_addr_t_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_t_expected_prev);
		$display ("     Real value = %b", RF_W_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_W_addr_t_exp[2] = RF_W_addr_t_expected_prev[2];
	end
	if (
		( RF_W_addr_t_expected_prev[3] !== 1'bx ) && ( RF_W_addr_t_prev[3] !== RF_W_addr_t_expected_prev[3] )
		&& ((RF_W_addr_t_expected_prev[3] !== last_RF_W_addr_t_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_t_expected_prev);
		$display ("     Real value = %b", RF_W_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_W_addr_t_exp[3] = RF_W_addr_t_expected_prev[3];
	end
	if (
		( RF_W_wr_t_expected_prev !== 1'bx ) && ( RF_W_wr_t_prev !== RF_W_wr_t_expected_prev )
		&& ((RF_W_wr_t_expected_prev !== last_RF_W_wr_t_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_wr_t :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_wr_t_expected_prev);
		$display ("     Real value = %b", RF_W_wr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RF_W_wr_t_exp = RF_W_wr_t_expected_prev;
	end
	if (
		( rom_addr_t_expected_prev[0] !== 1'bx ) && ( rom_addr_t_prev[0] !== rom_addr_t_expected_prev[0] )
		&& ((rom_addr_t_expected_prev[0] !== last_rom_addr_t_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_addr_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_addr_t_expected_prev);
		$display ("     Real value = %b", rom_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rom_addr_t_exp[0] = rom_addr_t_expected_prev[0];
	end
	if (
		( rom_addr_t_expected_prev[1] !== 1'bx ) && ( rom_addr_t_prev[1] !== rom_addr_t_expected_prev[1] )
		&& ((rom_addr_t_expected_prev[1] !== last_rom_addr_t_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_addr_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_addr_t_expected_prev);
		$display ("     Real value = %b", rom_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rom_addr_t_exp[1] = rom_addr_t_expected_prev[1];
	end
	if (
		( rom_addr_t_expected_prev[2] !== 1'bx ) && ( rom_addr_t_prev[2] !== rom_addr_t_expected_prev[2] )
		&& ((rom_addr_t_expected_prev[2] !== last_rom_addr_t_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_addr_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_addr_t_expected_prev);
		$display ("     Real value = %b", rom_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rom_addr_t_exp[2] = rom_addr_t_expected_prev[2];
	end
	if (
		( rom_addr_t_expected_prev[3] !== 1'bx ) && ( rom_addr_t_prev[3] !== rom_addr_t_expected_prev[3] )
		&& ((rom_addr_t_expected_prev[3] !== last_rom_addr_t_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_addr_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_addr_t_expected_prev);
		$display ("     Real value = %b", rom_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rom_addr_t_exp[3] = rom_addr_t_expected_prev[3];
	end
	if (
		( rom_addr_t_expected_prev[4] !== 1'bx ) && ( rom_addr_t_prev[4] !== rom_addr_t_expected_prev[4] )
		&& ((rom_addr_t_expected_prev[4] !== last_rom_addr_t_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_addr_t[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_addr_t_expected_prev);
		$display ("     Real value = %b", rom_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rom_addr_t_exp[4] = rom_addr_t_expected_prev[4];
	end
	if (
		( rom_addr_t_expected_prev[5] !== 1'bx ) && ( rom_addr_t_prev[5] !== rom_addr_t_expected_prev[5] )
		&& ((rom_addr_t_expected_prev[5] !== last_rom_addr_t_exp[5]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_addr_t[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_addr_t_expected_prev);
		$display ("     Real value = %b", rom_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rom_addr_t_exp[5] = rom_addr_t_expected_prev[5];
	end
	if (
		( rom_addr_t_expected_prev[6] !== 1'bx ) && ( rom_addr_t_prev[6] !== rom_addr_t_expected_prev[6] )
		&& ((rom_addr_t_expected_prev[6] !== last_rom_addr_t_exp[6]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_addr_t[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_addr_t_expected_prev);
		$display ("     Real value = %b", rom_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rom_addr_t_exp[6] = rom_addr_t_expected_prev[6];
	end
	if (
		( rom_addr_t_expected_prev[7] !== 1'bx ) && ( rom_addr_t_prev[7] !== rom_addr_t_expected_prev[7] )
		&& ((rom_addr_t_expected_prev[7] !== last_rom_addr_t_exp[7]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_addr_t[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_addr_t_expected_prev);
		$display ("     Real value = %b", rom_addr_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_rom_addr_t_exp[7] = rom_addr_t_expected_prev[7];
	end
	if (
		( rom_data_t_expected_prev[0] !== 1'bx ) && ( rom_data_t_prev[0] !== rom_data_t_expected_prev[0] )
		&& ((rom_data_t_expected_prev[0] !== last_rom_data_t_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[0] = rom_data_t_expected_prev[0];
	end
	if (
		( rom_data_t_expected_prev[1] !== 1'bx ) && ( rom_data_t_prev[1] !== rom_data_t_expected_prev[1] )
		&& ((rom_data_t_expected_prev[1] !== last_rom_data_t_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[1] = rom_data_t_expected_prev[1];
	end
	if (
		( rom_data_t_expected_prev[2] !== 1'bx ) && ( rom_data_t_prev[2] !== rom_data_t_expected_prev[2] )
		&& ((rom_data_t_expected_prev[2] !== last_rom_data_t_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[2] = rom_data_t_expected_prev[2];
	end
	if (
		( rom_data_t_expected_prev[3] !== 1'bx ) && ( rom_data_t_prev[3] !== rom_data_t_expected_prev[3] )
		&& ((rom_data_t_expected_prev[3] !== last_rom_data_t_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[3] = rom_data_t_expected_prev[3];
	end
	if (
		( rom_data_t_expected_prev[4] !== 1'bx ) && ( rom_data_t_prev[4] !== rom_data_t_expected_prev[4] )
		&& ((rom_data_t_expected_prev[4] !== last_rom_data_t_exp[4]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[4] = rom_data_t_expected_prev[4];
	end
	if (
		( rom_data_t_expected_prev[5] !== 1'bx ) && ( rom_data_t_prev[5] !== rom_data_t_expected_prev[5] )
		&& ((rom_data_t_expected_prev[5] !== last_rom_data_t_exp[5]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[5] = rom_data_t_expected_prev[5];
	end
	if (
		( rom_data_t_expected_prev[6] !== 1'bx ) && ( rom_data_t_prev[6] !== rom_data_t_expected_prev[6] )
		&& ((rom_data_t_expected_prev[6] !== last_rom_data_t_exp[6]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[6] = rom_data_t_expected_prev[6];
	end
	if (
		( rom_data_t_expected_prev[7] !== 1'bx ) && ( rom_data_t_prev[7] !== rom_data_t_expected_prev[7] )
		&& ((rom_data_t_expected_prev[7] !== last_rom_data_t_exp[7]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[7] = rom_data_t_expected_prev[7];
	end
	if (
		( rom_data_t_expected_prev[8] !== 1'bx ) && ( rom_data_t_prev[8] !== rom_data_t_expected_prev[8] )
		&& ((rom_data_t_expected_prev[8] !== last_rom_data_t_exp[8]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[8] = rom_data_t_expected_prev[8];
	end
	if (
		( rom_data_t_expected_prev[9] !== 1'bx ) && ( rom_data_t_prev[9] !== rom_data_t_expected_prev[9] )
		&& ((rom_data_t_expected_prev[9] !== last_rom_data_t_exp[9]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[9] = rom_data_t_expected_prev[9];
	end
	if (
		( rom_data_t_expected_prev[10] !== 1'bx ) && ( rom_data_t_prev[10] !== rom_data_t_expected_prev[10] )
		&& ((rom_data_t_expected_prev[10] !== last_rom_data_t_exp[10]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[10] = rom_data_t_expected_prev[10];
	end
	if (
		( rom_data_t_expected_prev[11] !== 1'bx ) && ( rom_data_t_prev[11] !== rom_data_t_expected_prev[11] )
		&& ((rom_data_t_expected_prev[11] !== last_rom_data_t_exp[11]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[11] = rom_data_t_expected_prev[11];
	end
	if (
		( rom_data_t_expected_prev[12] !== 1'bx ) && ( rom_data_t_prev[12] !== rom_data_t_expected_prev[12] )
		&& ((rom_data_t_expected_prev[12] !== last_rom_data_t_exp[12]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[12] = rom_data_t_expected_prev[12];
	end
	if (
		( rom_data_t_expected_prev[13] !== 1'bx ) && ( rom_data_t_prev[13] !== rom_data_t_expected_prev[13] )
		&& ((rom_data_t_expected_prev[13] !== last_rom_data_t_exp[13]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[13] = rom_data_t_expected_prev[13];
	end
	if (
		( rom_data_t_expected_prev[14] !== 1'bx ) && ( rom_data_t_prev[14] !== rom_data_t_expected_prev[14] )
		&& ((rom_data_t_expected_prev[14] !== last_rom_data_t_exp[14]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[14] = rom_data_t_expected_prev[14];
	end
	if (
		( rom_data_t_expected_prev[15] !== 1'bx ) && ( rom_data_t_prev[15] !== rom_data_t_expected_prev[15] )
		&& ((rom_data_t_expected_prev[15] !== last_rom_data_t_exp[15]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_t[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_t_expected_prev);
		$display ("     Real value = %b", rom_data_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_rom_data_t_exp[15] = rom_data_t_expected_prev[15];
	end
	if (
		( rom_rd_t_expected_prev !== 1'bx ) && ( rom_rd_t_prev !== rom_rd_t_expected_prev )
		&& ((rom_rd_t_expected_prev !== last_rom_rd_t_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_rd_t :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_rd_t_expected_prev);
		$display ("     Real value = %b", rom_rd_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_rom_rd_t_exp = rom_rd_t_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#4000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] addr_in;
reg clk;
reg r;
// wires                                               
wire alu_s0_t;
wire [7:0] D_addr_t;
wire D_rd_t;
wire D_wr_t;
wire [6:0] hex0;
wire [6:0] hex1;
wire [6:0] hex2;
wire [6:0] hex3;
wire I_rd_t;
wire [15:0] R_data_t;
wire [15:0] RAM_W_data_t;
wire [3:0] RF_Rp_addr_t;
wire RF_Rp_rd_t;
wire [3:0] RF_Rq_addr_t;
wire RF_Rq_rd_t;
wire RF_s_t;
wire [3:0] RF_W_addr_t;
wire RF_W_wr_t;
wire [7:0] rom_addr_t;
wire [15:0] rom_data_t;
wire rom_rd_t;

wire sampler;                             

// assign statements (if any)                          
processador i1 (
// port map - connection between master ports and signals/registers   
	.addr_in(addr_in),
	.alu_s0_t(alu_s0_t),
	.clk(clk),
	.D_addr_t(D_addr_t),
	.D_rd_t(D_rd_t),
	.D_wr_t(D_wr_t),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.I_rd_t(I_rd_t),
	.r(r),
	.R_data_t(R_data_t),
	.RAM_W_data_t(RAM_W_data_t),
	.RF_Rp_addr_t(RF_Rp_addr_t),
	.RF_Rp_rd_t(RF_Rp_rd_t),
	.RF_Rq_addr_t(RF_Rq_addr_t),
	.RF_Rq_rd_t(RF_Rq_rd_t),
	.RF_s_t(RF_s_t),
	.RF_W_addr_t(RF_W_addr_t),
	.RF_W_wr_t(RF_W_wr_t),
	.rom_addr_t(rom_addr_t),
	.rom_data_t(rom_data_t),
	.rom_rd_t(rom_rd_t)
);

// r
initial
begin
	r = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// addr_in[ 7 ]
initial
begin
	addr_in[7] = 1'b0;
end 
// addr_in[ 6 ]
initial
begin
	addr_in[6] = 1'b0;
end 
// addr_in[ 5 ]
initial
begin
	addr_in[5] = 1'b0;
end 
// addr_in[ 4 ]
initial
begin
	addr_in[4] = 1'b0;
end 
// addr_in[ 3 ]
initial
begin
	addr_in[3] = 1'b0;
end 
// addr_in[ 2 ]
initial
begin
	addr_in[2] = 1'b1;
	addr_in[2] = #1999000 1'b0;
end 
// addr_in[ 1 ]
initial
begin
	addr_in[1] = 1'b0;
end 
// addr_in[ 0 ]
initial
begin
	addr_in[0] = 1'b1;
	addr_in[0] = #1999000 1'b0;
end 

processador_vlg_sample_tst tb_sample (
	.addr_in(addr_in),
	.clk(clk),
	.r(r),
	.sampler_tx(sampler)
);

processador_vlg_check_tst tb_out(
	.alu_s0_t(alu_s0_t),
	.D_addr_t(D_addr_t),
	.D_rd_t(D_rd_t),
	.D_wr_t(D_wr_t),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.I_rd_t(I_rd_t),
	.R_data_t(R_data_t),
	.RAM_W_data_t(RAM_W_data_t),
	.RF_Rp_addr_t(RF_Rp_addr_t),
	.RF_Rp_rd_t(RF_Rp_rd_t),
	.RF_Rq_addr_t(RF_Rq_addr_t),
	.RF_Rq_rd_t(RF_Rq_rd_t),
	.RF_s_t(RF_s_t),
	.RF_W_addr_t(RF_W_addr_t),
	.RF_W_wr_t(RF_W_wr_t),
	.rom_addr_t(rom_addr_t),
	.rom_data_t(rom_data_t),
	.rom_rd_t(rom_rd_t),
	.sampler_rx(sampler)
);
endmodule

