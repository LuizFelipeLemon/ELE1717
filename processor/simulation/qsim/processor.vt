// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/16/2019 17:19:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processor_vlg_sample_tst(
	address_b,
	b_bs,
	clk,
	r,
	wren_b,
	sampler_tx
);
input [7:0] address_b;
input  b_bs;
input  clk;
input  r;
input  wren_b;
output sampler_tx;

reg sample;
time current_time;
always @(address_b or b_bs or clk or r or wren_b)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processor_vlg_check_tst (
	C,
	hex0,
	hex1,
	hex2,
	hex3,
	hex4,
	t_Aa,
	t_AB_Reg,
	t_AB_RegX,
	t_c,
	t_clk_d,
	t_count_PC,
	t_count_SP,
	t_Da,
	t_mem,
	t_op1_ld,
	t_op1_out,
	t_op2_ld,
	t_op2_out,
	t_op_ld,
	t_op_out,
	t_OP_sel,
	t_push_pop,
	t_sel_MUX_ABCD,
	t_sel_MUX_ABCD_IN,
	t_sel_MUX_Da,
	t_sel_MUX_MEM,
	t_sel_MUX_ULA,
	t_sel_PC,
	t_sel_SP,
	t_W_wr,
	t_Wa,
	t_z,
	Z,
	sampler_rx
);
input  C;
input [6:0] hex0;
input [6:0] hex1;
input [6:0] hex2;
input [6:0] hex3;
input [6:0] hex4;
input [7:0] t_Aa;
input [1:0] t_AB_Reg;
input [1:0] t_AB_RegX;
input  t_c;
input  t_clk_d;
input  t_count_PC;
input  t_count_SP;
input [7:0] t_Da;
input [7:0] t_mem;
input  t_op1_ld;
input [7:0] t_op1_out;
input  t_op2_ld;
input [7:0] t_op2_out;
input  t_op_ld;
input [7:0] t_op_out;
input [3:0] t_OP_sel;
input  t_push_pop;
input [1:0] t_sel_MUX_ABCD;
input [1:0] t_sel_MUX_ABCD_IN;
input [1:0] t_sel_MUX_Da;
input [2:0] t_sel_MUX_MEM;
input [1:0] t_sel_MUX_ULA;
input [1:0] t_sel_PC;
input [1:0] t_sel_SP;
input  t_W_wr;
input  t_Wa;
input  t_z;
input  Z;
input sampler_rx;

reg  C_expected;
reg [6:0] hex0_expected;
reg [6:0] hex1_expected;
reg [6:0] hex2_expected;
reg [6:0] hex3_expected;
reg [6:0] hex4_expected;
reg [7:0] t_Aa_expected;
reg [1:0] t_AB_Reg_expected;
reg [1:0] t_AB_RegX_expected;
reg  t_c_expected;
reg  t_clk_d_expected;
reg  t_count_PC_expected;
reg  t_count_SP_expected;
reg [7:0] t_Da_expected;
reg [7:0] t_mem_expected;
reg  t_op1_ld_expected;
reg [7:0] t_op1_out_expected;
reg  t_op2_ld_expected;
reg [7:0] t_op2_out_expected;
reg  t_op_ld_expected;
reg [7:0] t_op_out_expected;
reg [3:0] t_OP_sel_expected;
reg  t_push_pop_expected;
reg [1:0] t_sel_MUX_ABCD_expected;
reg [1:0] t_sel_MUX_ABCD_IN_expected;
reg [1:0] t_sel_MUX_Da_expected;
reg [2:0] t_sel_MUX_MEM_expected;
reg [1:0] t_sel_MUX_ULA_expected;
reg [1:0] t_sel_PC_expected;
reg [1:0] t_sel_SP_expected;
reg  t_W_wr_expected;
reg  t_Wa_expected;
reg  t_z_expected;
reg  Z_expected;

reg  C_prev;
reg [6:0] hex0_prev;
reg [6:0] hex1_prev;
reg [6:0] hex2_prev;
reg [6:0] hex3_prev;
reg [6:0] hex4_prev;
reg [7:0] t_Aa_prev;
reg [1:0] t_AB_Reg_prev;
reg [1:0] t_AB_RegX_prev;
reg  t_c_prev;
reg  t_clk_d_prev;
reg  t_count_PC_prev;
reg  t_count_SP_prev;
reg [7:0] t_Da_prev;
reg [7:0] t_mem_prev;
reg  t_op1_ld_prev;
reg [7:0] t_op1_out_prev;
reg  t_op2_ld_prev;
reg [7:0] t_op2_out_prev;
reg  t_op_ld_prev;
reg [7:0] t_op_out_prev;
reg [3:0] t_OP_sel_prev;
reg  t_push_pop_prev;
reg [1:0] t_sel_MUX_ABCD_prev;
reg [1:0] t_sel_MUX_ABCD_IN_prev;
reg [1:0] t_sel_MUX_Da_prev;
reg [2:0] t_sel_MUX_MEM_prev;
reg [1:0] t_sel_MUX_ULA_prev;
reg [1:0] t_sel_PC_prev;
reg [1:0] t_sel_SP_prev;
reg  t_W_wr_prev;
reg  t_Wa_prev;
reg  t_z_prev;
reg  Z_prev;

reg  C_expected_prev;
reg [6:0] hex0_expected_prev;
reg [6:0] hex1_expected_prev;
reg [6:0] hex2_expected_prev;
reg [6:0] hex3_expected_prev;
reg [6:0] hex4_expected_prev;
reg [7:0] t_Aa_expected_prev;
reg [1:0] t_AB_Reg_expected_prev;
reg [1:0] t_AB_RegX_expected_prev;
reg  t_c_expected_prev;
reg  t_clk_d_expected_prev;
reg  t_count_PC_expected_prev;
reg  t_count_SP_expected_prev;
reg [7:0] t_Da_expected_prev;
reg [7:0] t_mem_expected_prev;
reg  t_op1_ld_expected_prev;
reg [7:0] t_op1_out_expected_prev;
reg  t_op2_ld_expected_prev;
reg [7:0] t_op2_out_expected_prev;
reg  t_op_ld_expected_prev;
reg [7:0] t_op_out_expected_prev;
reg [3:0] t_OP_sel_expected_prev;
reg  t_push_pop_expected_prev;
reg [1:0] t_sel_MUX_ABCD_expected_prev;
reg [1:0] t_sel_MUX_ABCD_IN_expected_prev;
reg [1:0] t_sel_MUX_Da_expected_prev;
reg [2:0] t_sel_MUX_MEM_expected_prev;
reg [1:0] t_sel_MUX_ULA_expected_prev;
reg [1:0] t_sel_PC_expected_prev;
reg [1:0] t_sel_SP_expected_prev;
reg  t_W_wr_expected_prev;
reg  t_Wa_expected_prev;
reg  t_z_expected_prev;
reg  Z_expected_prev;

reg  last_C_exp;
reg [6:0] last_hex0_exp;
reg [6:0] last_hex1_exp;
reg [6:0] last_hex2_exp;
reg [6:0] last_hex3_exp;
reg [6:0] last_hex4_exp;
reg [7:0] last_t_Aa_exp;
reg [1:0] last_t_AB_Reg_exp;
reg [1:0] last_t_AB_RegX_exp;
reg  last_t_c_exp;
reg  last_t_clk_d_exp;
reg  last_t_count_PC_exp;
reg  last_t_count_SP_exp;
reg [7:0] last_t_Da_exp;
reg [7:0] last_t_mem_exp;
reg  last_t_op1_ld_exp;
reg [7:0] last_t_op1_out_exp;
reg  last_t_op2_ld_exp;
reg [7:0] last_t_op2_out_exp;
reg  last_t_op_ld_exp;
reg [7:0] last_t_op_out_exp;
reg [3:0] last_t_OP_sel_exp;
reg  last_t_push_pop_exp;
reg [1:0] last_t_sel_MUX_ABCD_exp;
reg [1:0] last_t_sel_MUX_ABCD_IN_exp;
reg [1:0] last_t_sel_MUX_Da_exp;
reg [2:0] last_t_sel_MUX_MEM_exp;
reg [1:0] last_t_sel_MUX_ULA_exp;
reg [1:0] last_t_sel_PC_exp;
reg [1:0] last_t_sel_SP_exp;
reg  last_t_W_wr_exp;
reg  last_t_Wa_exp;
reg  last_t_z_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:34] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 34'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_prev = C;
	hex0_prev = hex0;
	hex1_prev = hex1;
	hex2_prev = hex2;
	hex3_prev = hex3;
	hex4_prev = hex4;
	t_Aa_prev = t_Aa;
	t_AB_Reg_prev = t_AB_Reg;
	t_AB_RegX_prev = t_AB_RegX;
	t_c_prev = t_c;
	t_clk_d_prev = t_clk_d;
	t_count_PC_prev = t_count_PC;
	t_count_SP_prev = t_count_SP;
	t_Da_prev = t_Da;
	t_mem_prev = t_mem;
	t_op1_ld_prev = t_op1_ld;
	t_op1_out_prev = t_op1_out;
	t_op2_ld_prev = t_op2_ld;
	t_op2_out_prev = t_op2_out;
	t_op_ld_prev = t_op_ld;
	t_op_out_prev = t_op_out;
	t_OP_sel_prev = t_OP_sel;
	t_push_pop_prev = t_push_pop;
	t_sel_MUX_ABCD_prev = t_sel_MUX_ABCD;
	t_sel_MUX_ABCD_IN_prev = t_sel_MUX_ABCD_IN;
	t_sel_MUX_Da_prev = t_sel_MUX_Da;
	t_sel_MUX_MEM_prev = t_sel_MUX_MEM;
	t_sel_MUX_ULA_prev = t_sel_MUX_ULA;
	t_sel_PC_prev = t_sel_PC;
	t_sel_SP_prev = t_sel_SP;
	t_W_wr_prev = t_W_wr;
	t_Wa_prev = t_Wa;
	t_z_prev = t_z;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	C_expected_prev = C_expected;
	hex0_expected_prev = hex0_expected;
	hex1_expected_prev = hex1_expected;
	hex2_expected_prev = hex2_expected;
	hex3_expected_prev = hex3_expected;
	hex4_expected_prev = hex4_expected;
	t_Aa_expected_prev = t_Aa_expected;
	t_AB_Reg_expected_prev = t_AB_Reg_expected;
	t_AB_RegX_expected_prev = t_AB_RegX_expected;
	t_c_expected_prev = t_c_expected;
	t_clk_d_expected_prev = t_clk_d_expected;
	t_count_PC_expected_prev = t_count_PC_expected;
	t_count_SP_expected_prev = t_count_SP_expected;
	t_Da_expected_prev = t_Da_expected;
	t_mem_expected_prev = t_mem_expected;
	t_op1_ld_expected_prev = t_op1_ld_expected;
	t_op1_out_expected_prev = t_op1_out_expected;
	t_op2_ld_expected_prev = t_op2_ld_expected;
	t_op2_out_expected_prev = t_op2_out_expected;
	t_op_ld_expected_prev = t_op_ld_expected;
	t_op_out_expected_prev = t_op_out_expected;
	t_OP_sel_expected_prev = t_OP_sel_expected;
	t_push_pop_expected_prev = t_push_pop_expected;
	t_sel_MUX_ABCD_expected_prev = t_sel_MUX_ABCD_expected;
	t_sel_MUX_ABCD_IN_expected_prev = t_sel_MUX_ABCD_IN_expected;
	t_sel_MUX_Da_expected_prev = t_sel_MUX_Da_expected;
	t_sel_MUX_MEM_expected_prev = t_sel_MUX_MEM_expected;
	t_sel_MUX_ULA_expected_prev = t_sel_MUX_ULA_expected;
	t_sel_PC_expected_prev = t_sel_PC_expected;
	t_sel_SP_expected_prev = t_sel_SP_expected;
	t_W_wr_expected_prev = t_W_wr_expected;
	t_Wa_expected_prev = t_Wa_expected;
	t_z_expected_prev = t_z_expected;
	Z_expected_prev = Z_expected;
end



// expected t_clk_d
initial
begin
	t_clk_d_expected = 1'bX;
	t_clk_d_expected = #999000 1'b0;
end 

// expected t_c
initial
begin
	t_c_expected = 1'bX;
	t_c_expected = #999000 1'b0;
end 

// expected t_z
initial
begin
	t_z_expected = 1'bX;
	t_z_expected = #999000 1'b0;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
	Z_expected = #999000 1'b0;
end 

// expected C
initial
begin
	C_expected = 1'bX;
	C_expected = #999000 1'b0;
end 

// expected t_count_PC
initial
begin
	t_count_PC_expected = 1'bX;
	t_count_PC_expected = #999000 1'b0;
end 

// expected t_count_SP
initial
begin
	t_count_SP_expected = 1'bX;
	t_count_SP_expected = #999000 1'b0;
end 

// expected t_op_ld
initial
begin
	t_op_ld_expected = 1'bX;
	t_op_ld_expected = #999000 1'b0;
end 
// expected t_op_out[ 7 ]
initial
begin
	t_op_out_expected[7] = 1'bX;
	t_op_out_expected[7] = #999000 1'b0;
end 
// expected t_op_out[ 6 ]
initial
begin
	t_op_out_expected[6] = 1'bX;
	t_op_out_expected[6] = #999000 1'b0;
end 
// expected t_op_out[ 5 ]
initial
begin
	t_op_out_expected[5] = 1'bX;
	t_op_out_expected[5] = #999000 1'b0;
end 
// expected t_op_out[ 4 ]
initial
begin
	t_op_out_expected[4] = 1'bX;
	t_op_out_expected[4] = #999000 1'b0;
end 
// expected t_op_out[ 3 ]
initial
begin
	t_op_out_expected[3] = 1'bX;
	t_op_out_expected[3] = #999000 1'b0;
end 
// expected t_op_out[ 2 ]
initial
begin
	t_op_out_expected[2] = 1'bX;
	t_op_out_expected[2] = #999000 1'b0;
end 
// expected t_op_out[ 1 ]
initial
begin
	t_op_out_expected[1] = 1'bX;
	t_op_out_expected[1] = #999000 1'b0;
end 
// expected t_op_out[ 0 ]
initial
begin
	t_op_out_expected[0] = 1'bX;
	t_op_out_expected[0] = #999000 1'b0;
end 

// expected t_op1_ld
initial
begin
	t_op1_ld_expected = 1'bX;
	t_op1_ld_expected = #999000 1'b0;
end 
// expected t_op1_out[ 7 ]
initial
begin
	t_op1_out_expected[7] = 1'bX;
	t_op1_out_expected[7] = #999000 1'b0;
end 
// expected t_op1_out[ 6 ]
initial
begin
	t_op1_out_expected[6] = 1'bX;
	t_op1_out_expected[6] = #999000 1'b0;
end 
// expected t_op1_out[ 5 ]
initial
begin
	t_op1_out_expected[5] = 1'bX;
	t_op1_out_expected[5] = #999000 1'b0;
end 
// expected t_op1_out[ 4 ]
initial
begin
	t_op1_out_expected[4] = 1'bX;
	t_op1_out_expected[4] = #999000 1'b0;
end 
// expected t_op1_out[ 3 ]
initial
begin
	t_op1_out_expected[3] = 1'bX;
	t_op1_out_expected[3] = #999000 1'b0;
end 
// expected t_op1_out[ 2 ]
initial
begin
	t_op1_out_expected[2] = 1'bX;
	t_op1_out_expected[2] = #999000 1'b0;
end 
// expected t_op1_out[ 1 ]
initial
begin
	t_op1_out_expected[1] = 1'bX;
	t_op1_out_expected[1] = #999000 1'b0;
end 
// expected t_op1_out[ 0 ]
initial
begin
	t_op1_out_expected[0] = 1'bX;
	t_op1_out_expected[0] = #999000 1'b0;
end 

// expected t_op2_ld
initial
begin
	t_op2_ld_expected = 1'bX;
	t_op2_ld_expected = #999000 1'b0;
end 
// expected t_op2_out[ 7 ]
initial
begin
	t_op2_out_expected[7] = 1'bX;
	t_op2_out_expected[7] = #999000 1'b0;
end 
// expected t_op2_out[ 6 ]
initial
begin
	t_op2_out_expected[6] = 1'bX;
	t_op2_out_expected[6] = #999000 1'b0;
end 
// expected t_op2_out[ 5 ]
initial
begin
	t_op2_out_expected[5] = 1'bX;
	t_op2_out_expected[5] = #999000 1'b0;
end 
// expected t_op2_out[ 4 ]
initial
begin
	t_op2_out_expected[4] = 1'bX;
	t_op2_out_expected[4] = #999000 1'b0;
end 
// expected t_op2_out[ 3 ]
initial
begin
	t_op2_out_expected[3] = 1'bX;
	t_op2_out_expected[3] = #999000 1'b0;
end 
// expected t_op2_out[ 2 ]
initial
begin
	t_op2_out_expected[2] = 1'bX;
	t_op2_out_expected[2] = #999000 1'b0;
end 
// expected t_op2_out[ 1 ]
initial
begin
	t_op2_out_expected[1] = 1'bX;
	t_op2_out_expected[1] = #999000 1'b0;
end 
// expected t_op2_out[ 0 ]
initial
begin
	t_op2_out_expected[0] = 1'bX;
	t_op2_out_expected[0] = #999000 1'b0;
end 
// expected t_Aa[ 7 ]
initial
begin
	t_Aa_expected[7] = 1'bX;
	t_Aa_expected[7] = #999000 1'b0;
end 
// expected t_Aa[ 6 ]
initial
begin
	t_Aa_expected[6] = 1'bX;
	t_Aa_expected[6] = #999000 1'b0;
end 
// expected t_Aa[ 5 ]
initial
begin
	t_Aa_expected[5] = 1'bX;
	t_Aa_expected[5] = #999000 1'b0;
end 
// expected t_Aa[ 4 ]
initial
begin
	t_Aa_expected[4] = 1'bX;
	t_Aa_expected[4] = #999000 1'b0;
end 
// expected t_Aa[ 3 ]
initial
begin
	t_Aa_expected[3] = 1'bX;
	t_Aa_expected[3] = #999000 1'b0;
end 
// expected t_Aa[ 2 ]
initial
begin
	t_Aa_expected[2] = 1'bX;
	t_Aa_expected[2] = #999000 1'b0;
end 
// expected t_Aa[ 1 ]
initial
begin
	t_Aa_expected[1] = 1'bX;
	t_Aa_expected[1] = #999000 1'b0;
end 
// expected t_Aa[ 0 ]
initial
begin
	t_Aa_expected[0] = 1'bX;
	t_Aa_expected[0] = #999000 1'b0;
end 
// expected t_Da[ 7 ]
initial
begin
	t_Da_expected[7] = 1'bX;
	t_Da_expected[7] = #999000 1'b0;
end 
// expected t_Da[ 6 ]
initial
begin
	t_Da_expected[6] = 1'bX;
	t_Da_expected[6] = #999000 1'b0;
end 
// expected t_Da[ 5 ]
initial
begin
	t_Da_expected[5] = 1'bX;
	t_Da_expected[5] = #999000 1'b0;
end 
// expected t_Da[ 4 ]
initial
begin
	t_Da_expected[4] = 1'bX;
	t_Da_expected[4] = #999000 1'b0;
end 
// expected t_Da[ 3 ]
initial
begin
	t_Da_expected[3] = 1'bX;
	t_Da_expected[3] = #999000 1'b0;
end 
// expected t_Da[ 2 ]
initial
begin
	t_Da_expected[2] = 1'bX;
	t_Da_expected[2] = #999000 1'b0;
end 
// expected t_Da[ 1 ]
initial
begin
	t_Da_expected[1] = 1'bX;
	t_Da_expected[1] = #999000 1'b0;
end 
// expected t_Da[ 0 ]
initial
begin
	t_Da_expected[0] = 1'bX;
	t_Da_expected[0] = #999000 1'b0;
end 
// expected t_mem[ 7 ]
initial
begin
	t_mem_expected[7] = 1'bX;
	t_mem_expected[7] = #999000 1'b0;
end 
// expected t_mem[ 6 ]
initial
begin
	t_mem_expected[6] = 1'bX;
	t_mem_expected[6] = #999000 1'b0;
end 
// expected t_mem[ 5 ]
initial
begin
	t_mem_expected[5] = 1'bX;
	t_mem_expected[5] = #999000 1'b0;
end 
// expected t_mem[ 4 ]
initial
begin
	t_mem_expected[4] = 1'bX;
	t_mem_expected[4] = #999000 1'b0;
end 
// expected t_mem[ 3 ]
initial
begin
	t_mem_expected[3] = 1'bX;
	t_mem_expected[3] = #999000 1'b0;
end 
// expected t_mem[ 2 ]
initial
begin
	t_mem_expected[2] = 1'bX;
	t_mem_expected[2] = #999000 1'b0;
end 
// expected t_mem[ 1 ]
initial
begin
	t_mem_expected[1] = 1'bX;
	t_mem_expected[1] = #999000 1'b0;
end 
// expected t_mem[ 0 ]
initial
begin
	t_mem_expected[0] = 1'bX;
	t_mem_expected[0] = #999000 1'b0;
end 

// expected t_Wa
initial
begin
	t_Wa_expected = 1'bX;
	t_Wa_expected = #999000 1'b0;
end 
// expected t_AB_Reg[ 1 ]
initial
begin
	t_AB_Reg_expected[1] = 1'bX;
	t_AB_Reg_expected[1] = #999000 1'b0;
end 
// expected t_AB_Reg[ 0 ]
initial
begin
	t_AB_Reg_expected[0] = 1'bX;
	t_AB_Reg_expected[0] = #999000 1'b0;
end 
// expected t_AB_RegX[ 1 ]
initial
begin
	t_AB_RegX_expected[1] = 1'bX;
	t_AB_RegX_expected[1] = #999000 1'b0;
end 
// expected t_AB_RegX[ 0 ]
initial
begin
	t_AB_RegX_expected[0] = 1'bX;
	t_AB_RegX_expected[0] = #999000 1'b0;
end 
// expected t_OP_sel[ 3 ]
initial
begin
	t_OP_sel_expected[3] = 1'bX;
	t_OP_sel_expected[3] = #999000 1'b0;
end 
// expected t_OP_sel[ 2 ]
initial
begin
	t_OP_sel_expected[2] = 1'bX;
	t_OP_sel_expected[2] = #999000 1'b0;
end 
// expected t_OP_sel[ 1 ]
initial
begin
	t_OP_sel_expected[1] = 1'bX;
	t_OP_sel_expected[1] = #999000 1'b0;
end 
// expected t_OP_sel[ 0 ]
initial
begin
	t_OP_sel_expected[0] = 1'bX;
	t_OP_sel_expected[0] = #999000 1'b0;
end 

// expected t_push_pop
initial
begin
	t_push_pop_expected = 1'bX;
	t_push_pop_expected = #999000 1'b0;
end 
// expected t_sel_MUX_ABCD[ 1 ]
initial
begin
	t_sel_MUX_ABCD_expected[1] = 1'bX;
	t_sel_MUX_ABCD_expected[1] = #999000 1'b0;
end 
// expected t_sel_MUX_ABCD[ 0 ]
initial
begin
	t_sel_MUX_ABCD_expected[0] = 1'bX;
	t_sel_MUX_ABCD_expected[0] = #999000 1'b0;
end 
// expected t_sel_MUX_ABCD_IN[ 1 ]
initial
begin
	t_sel_MUX_ABCD_IN_expected[1] = 1'bX;
	t_sel_MUX_ABCD_IN_expected[1] = #999000 1'b0;
end 
// expected t_sel_MUX_ABCD_IN[ 0 ]
initial
begin
	t_sel_MUX_ABCD_IN_expected[0] = 1'bX;
	t_sel_MUX_ABCD_IN_expected[0] = #999000 1'b0;
end 
// expected t_sel_MUX_Da[ 1 ]
initial
begin
	t_sel_MUX_Da_expected[1] = 1'bX;
	t_sel_MUX_Da_expected[1] = #999000 1'b0;
end 
// expected t_sel_MUX_Da[ 0 ]
initial
begin
	t_sel_MUX_Da_expected[0] = 1'bX;
	t_sel_MUX_Da_expected[0] = #999000 1'b0;
end 

// expected t_sel_MUX_MEM[1]
initial
begin
	t_sel_MUX_MEM_expected[1] = 1'bX;
	t_sel_MUX_MEM_expected[1] = #999000 1'b0;
end 

// expected t_sel_MUX_MEM[0]
initial
begin
	t_sel_MUX_MEM_expected[0] = 1'bX;
	t_sel_MUX_MEM_expected[0] = #999000 1'b0;
end 
// expected t_sel_MUX_ULA[ 1 ]
initial
begin
	t_sel_MUX_ULA_expected[1] = 1'bX;
	t_sel_MUX_ULA_expected[1] = #999000 1'b0;
end 
// expected t_sel_MUX_ULA[ 0 ]
initial
begin
	t_sel_MUX_ULA_expected[0] = 1'bX;
	t_sel_MUX_ULA_expected[0] = #999000 1'b0;
end 
// expected t_sel_PC[ 1 ]
initial
begin
	t_sel_PC_expected[1] = 1'bX;
	t_sel_PC_expected[1] = #999000 1'b0;
end 
// expected t_sel_PC[ 0 ]
initial
begin
	t_sel_PC_expected[0] = 1'bX;
	t_sel_PC_expected[0] = #999000 1'b0;
end 
// expected t_sel_SP[ 1 ]
initial
begin
	t_sel_SP_expected[1] = 1'bX;
	t_sel_SP_expected[1] = #999000 1'b0;
end 
// expected t_sel_SP[ 0 ]
initial
begin
	t_sel_SP_expected[0] = 1'bX;
	t_sel_SP_expected[0] = #999000 1'b0;
end 

// expected t_W_wr
initial
begin
	t_W_wr_expected = 1'bX;
	t_W_wr_expected = #999000 1'b0;
end 

// expected t_sel_MUX_MEM[2]
initial
begin
	t_sel_MUX_MEM_expected[2] = 1'bX;
	t_sel_MUX_MEM_expected[2] = #999000 1'b0;
end 
// expected hex0[ 6 ]
initial
begin
	hex0_expected[6] = 1'bX;
end 
// expected hex0[ 5 ]
initial
begin
	hex0_expected[5] = 1'bX;
end 
// expected hex0[ 4 ]
initial
begin
	hex0_expected[4] = 1'bX;
end 
// expected hex0[ 3 ]
initial
begin
	hex0_expected[3] = 1'bX;
end 
// expected hex0[ 2 ]
initial
begin
	hex0_expected[2] = 1'bX;
end 
// expected hex0[ 1 ]
initial
begin
	hex0_expected[1] = 1'bX;
end 
// expected hex0[ 0 ]
initial
begin
	hex0_expected[0] = 1'bX;
end 
// expected hex1[ 6 ]
initial
begin
	hex1_expected[6] = 1'bX;
end 
// expected hex1[ 5 ]
initial
begin
	hex1_expected[5] = 1'bX;
end 
// expected hex1[ 4 ]
initial
begin
	hex1_expected[4] = 1'bX;
end 
// expected hex1[ 3 ]
initial
begin
	hex1_expected[3] = 1'bX;
end 
// expected hex1[ 2 ]
initial
begin
	hex1_expected[2] = 1'bX;
end 
// expected hex1[ 1 ]
initial
begin
	hex1_expected[1] = 1'bX;
end 
// expected hex1[ 0 ]
initial
begin
	hex1_expected[0] = 1'bX;
end 
// expected hex2[ 6 ]
initial
begin
	hex2_expected[6] = 1'bX;
end 
// expected hex2[ 5 ]
initial
begin
	hex2_expected[5] = 1'bX;
end 
// expected hex2[ 4 ]
initial
begin
	hex2_expected[4] = 1'bX;
end 
// expected hex2[ 3 ]
initial
begin
	hex2_expected[3] = 1'bX;
end 
// expected hex2[ 2 ]
initial
begin
	hex2_expected[2] = 1'bX;
end 
// expected hex2[ 1 ]
initial
begin
	hex2_expected[1] = 1'bX;
end 
// expected hex2[ 0 ]
initial
begin
	hex2_expected[0] = 1'bX;
end 
// expected hex3[ 6 ]
initial
begin
	hex3_expected[6] = 1'bX;
end 
// expected hex3[ 5 ]
initial
begin
	hex3_expected[5] = 1'bX;
end 
// expected hex3[ 4 ]
initial
begin
	hex3_expected[4] = 1'bX;
end 
// expected hex3[ 3 ]
initial
begin
	hex3_expected[3] = 1'bX;
end 
// expected hex3[ 2 ]
initial
begin
	hex3_expected[2] = 1'bX;
end 
// expected hex3[ 1 ]
initial
begin
	hex3_expected[1] = 1'bX;
end 
// expected hex3[ 0 ]
initial
begin
	hex3_expected[0] = 1'bX;
end 
// expected hex4[ 6 ]
initial
begin
	hex4_expected[6] = 1'bX;
end 
// expected hex4[ 5 ]
initial
begin
	hex4_expected[5] = 1'bX;
end 
// expected hex4[ 4 ]
initial
begin
	hex4_expected[4] = 1'bX;
end 
// expected hex4[ 3 ]
initial
begin
	hex4_expected[3] = 1'bX;
end 
// expected hex4[ 2 ]
initial
begin
	hex4_expected[2] = 1'bX;
end 
// expected hex4[ 1 ]
initial
begin
	hex4_expected[1] = 1'bX;
end 
// expected hex4[ 0 ]
initial
begin
	hex4_expected[0] = 1'bX;
end 
// generate trigger
always @(C_expected or C or hex0_expected or hex0 or hex1_expected or hex1 or hex2_expected or hex2 or hex3_expected or hex3 or hex4_expected or hex4 or t_Aa_expected or t_Aa or t_AB_Reg_expected or t_AB_Reg or t_AB_RegX_expected or t_AB_RegX or t_c_expected or t_c or t_clk_d_expected or t_clk_d or t_count_PC_expected or t_count_PC or t_count_SP_expected or t_count_SP or t_Da_expected or t_Da or t_mem_expected or t_mem or t_op1_ld_expected or t_op1_ld or t_op1_out_expected or t_op1_out or t_op2_ld_expected or t_op2_ld or t_op2_out_expected or t_op2_out or t_op_ld_expected or t_op_ld or t_op_out_expected or t_op_out or t_OP_sel_expected or t_OP_sel or t_push_pop_expected or t_push_pop or t_sel_MUX_ABCD_expected or t_sel_MUX_ABCD or t_sel_MUX_ABCD_IN_expected or t_sel_MUX_ABCD_IN or t_sel_MUX_Da_expected or t_sel_MUX_Da or t_sel_MUX_MEM_expected or t_sel_MUX_MEM or t_sel_MUX_ULA_expected or t_sel_MUX_ULA or t_sel_PC_expected or t_sel_PC or t_sel_SP_expected or t_sel_SP or t_W_wr_expected or t_W_wr or t_Wa_expected or t_Wa or t_z_expected or t_z or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C = %b | expected hex0 = %b | expected hex1 = %b | expected hex2 = %b | expected hex3 = %b | expected hex4 = %b | expected t_Aa = %b | expected t_AB_Reg = %b | expected t_AB_RegX = %b | expected t_c = %b | expected t_clk_d = %b | expected t_count_PC = %b | expected t_count_SP = %b | expected t_Da = %b | expected t_mem = %b | expected t_op1_ld = %b | expected t_op1_out = %b | expected t_op2_ld = %b | expected t_op2_out = %b | expected t_op_ld = %b | expected t_op_out = %b | expected t_OP_sel = %b | expected t_push_pop = %b | expected t_sel_MUX_ABCD = %b | expected t_sel_MUX_ABCD_IN = %b | expected t_sel_MUX_Da = %b | expected t_sel_MUX_MEM = %b | expected t_sel_MUX_ULA = %b | expected t_sel_PC = %b | expected t_sel_SP = %b | expected t_W_wr = %b | expected t_Wa = %b | expected t_z = %b | expected Z = %b | ",C_expected_prev,hex0_expected_prev,hex1_expected_prev,hex2_expected_prev,hex3_expected_prev,hex4_expected_prev,t_Aa_expected_prev,t_AB_Reg_expected_prev,t_AB_RegX_expected_prev,t_c_expected_prev,t_clk_d_expected_prev,t_count_PC_expected_prev,t_count_SP_expected_prev,t_Da_expected_prev,t_mem_expected_prev,t_op1_ld_expected_prev,t_op1_out_expected_prev,t_op2_ld_expected_prev,t_op2_out_expected_prev,t_op_ld_expected_prev,t_op_out_expected_prev,t_OP_sel_expected_prev,t_push_pop_expected_prev,t_sel_MUX_ABCD_expected_prev,t_sel_MUX_ABCD_IN_expected_prev,t_sel_MUX_Da_expected_prev,t_sel_MUX_MEM_expected_prev,t_sel_MUX_ULA_expected_prev,t_sel_PC_expected_prev,t_sel_SP_expected_prev,t_W_wr_expected_prev,t_Wa_expected_prev,t_z_expected_prev,Z_expected_prev);
	$display("| real C = %b | real hex0 = %b | real hex1 = %b | real hex2 = %b | real hex3 = %b | real hex4 = %b | real t_Aa = %b | real t_AB_Reg = %b | real t_AB_RegX = %b | real t_c = %b | real t_clk_d = %b | real t_count_PC = %b | real t_count_SP = %b | real t_Da = %b | real t_mem = %b | real t_op1_ld = %b | real t_op1_out = %b | real t_op2_ld = %b | real t_op2_out = %b | real t_op_ld = %b | real t_op_out = %b | real t_OP_sel = %b | real t_push_pop = %b | real t_sel_MUX_ABCD = %b | real t_sel_MUX_ABCD_IN = %b | real t_sel_MUX_Da = %b | real t_sel_MUX_MEM = %b | real t_sel_MUX_ULA = %b | real t_sel_PC = %b | real t_sel_SP = %b | real t_W_wr = %b | real t_Wa = %b | real t_z = %b | real Z = %b | ",C_prev,hex0_prev,hex1_prev,hex2_prev,hex3_prev,hex4_prev,t_Aa_prev,t_AB_Reg_prev,t_AB_RegX_prev,t_c_prev,t_clk_d_prev,t_count_PC_prev,t_count_SP_prev,t_Da_prev,t_mem_prev,t_op1_ld_prev,t_op1_out_prev,t_op2_ld_prev,t_op2_out_prev,t_op_ld_prev,t_op_out_prev,t_OP_sel_prev,t_push_pop_prev,t_sel_MUX_ABCD_prev,t_sel_MUX_ABCD_IN_prev,t_sel_MUX_Da_prev,t_sel_MUX_MEM_prev,t_sel_MUX_ULA_prev,t_sel_PC_prev,t_sel_SP_prev,t_W_wr_prev,t_Wa_prev,t_z_prev,Z_prev);
`endif
	if (
		( C_expected_prev !== 1'bx ) && ( C_prev !== C_expected_prev )
		&& ((C_expected_prev !== last_C_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp = C_expected_prev;
	end
	if (
		( hex0_expected_prev[0] !== 1'bx ) && ( hex0_prev[0] !== hex0_expected_prev[0] )
		&& ((hex0_expected_prev[0] !== last_hex0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[0] = hex0_expected_prev[0];
	end
	if (
		( hex0_expected_prev[1] !== 1'bx ) && ( hex0_prev[1] !== hex0_expected_prev[1] )
		&& ((hex0_expected_prev[1] !== last_hex0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[1] = hex0_expected_prev[1];
	end
	if (
		( hex0_expected_prev[2] !== 1'bx ) && ( hex0_prev[2] !== hex0_expected_prev[2] )
		&& ((hex0_expected_prev[2] !== last_hex0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[2] = hex0_expected_prev[2];
	end
	if (
		( hex0_expected_prev[3] !== 1'bx ) && ( hex0_prev[3] !== hex0_expected_prev[3] )
		&& ((hex0_expected_prev[3] !== last_hex0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[3] = hex0_expected_prev[3];
	end
	if (
		( hex0_expected_prev[4] !== 1'bx ) && ( hex0_prev[4] !== hex0_expected_prev[4] )
		&& ((hex0_expected_prev[4] !== last_hex0_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[4] = hex0_expected_prev[4];
	end
	if (
		( hex0_expected_prev[5] !== 1'bx ) && ( hex0_prev[5] !== hex0_expected_prev[5] )
		&& ((hex0_expected_prev[5] !== last_hex0_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[5] = hex0_expected_prev[5];
	end
	if (
		( hex0_expected_prev[6] !== 1'bx ) && ( hex0_prev[6] !== hex0_expected_prev[6] )
		&& ((hex0_expected_prev[6] !== last_hex0_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[6] = hex0_expected_prev[6];
	end
	if (
		( hex1_expected_prev[0] !== 1'bx ) && ( hex1_prev[0] !== hex1_expected_prev[0] )
		&& ((hex1_expected_prev[0] !== last_hex1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[0] = hex1_expected_prev[0];
	end
	if (
		( hex1_expected_prev[1] !== 1'bx ) && ( hex1_prev[1] !== hex1_expected_prev[1] )
		&& ((hex1_expected_prev[1] !== last_hex1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[1] = hex1_expected_prev[1];
	end
	if (
		( hex1_expected_prev[2] !== 1'bx ) && ( hex1_prev[2] !== hex1_expected_prev[2] )
		&& ((hex1_expected_prev[2] !== last_hex1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[2] = hex1_expected_prev[2];
	end
	if (
		( hex1_expected_prev[3] !== 1'bx ) && ( hex1_prev[3] !== hex1_expected_prev[3] )
		&& ((hex1_expected_prev[3] !== last_hex1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[3] = hex1_expected_prev[3];
	end
	if (
		( hex1_expected_prev[4] !== 1'bx ) && ( hex1_prev[4] !== hex1_expected_prev[4] )
		&& ((hex1_expected_prev[4] !== last_hex1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[4] = hex1_expected_prev[4];
	end
	if (
		( hex1_expected_prev[5] !== 1'bx ) && ( hex1_prev[5] !== hex1_expected_prev[5] )
		&& ((hex1_expected_prev[5] !== last_hex1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[5] = hex1_expected_prev[5];
	end
	if (
		( hex1_expected_prev[6] !== 1'bx ) && ( hex1_prev[6] !== hex1_expected_prev[6] )
		&& ((hex1_expected_prev[6] !== last_hex1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[6] = hex1_expected_prev[6];
	end
	if (
		( hex2_expected_prev[0] !== 1'bx ) && ( hex2_prev[0] !== hex2_expected_prev[0] )
		&& ((hex2_expected_prev[0] !== last_hex2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[0] = hex2_expected_prev[0];
	end
	if (
		( hex2_expected_prev[1] !== 1'bx ) && ( hex2_prev[1] !== hex2_expected_prev[1] )
		&& ((hex2_expected_prev[1] !== last_hex2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[1] = hex2_expected_prev[1];
	end
	if (
		( hex2_expected_prev[2] !== 1'bx ) && ( hex2_prev[2] !== hex2_expected_prev[2] )
		&& ((hex2_expected_prev[2] !== last_hex2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[2] = hex2_expected_prev[2];
	end
	if (
		( hex2_expected_prev[3] !== 1'bx ) && ( hex2_prev[3] !== hex2_expected_prev[3] )
		&& ((hex2_expected_prev[3] !== last_hex2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[3] = hex2_expected_prev[3];
	end
	if (
		( hex2_expected_prev[4] !== 1'bx ) && ( hex2_prev[4] !== hex2_expected_prev[4] )
		&& ((hex2_expected_prev[4] !== last_hex2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[4] = hex2_expected_prev[4];
	end
	if (
		( hex2_expected_prev[5] !== 1'bx ) && ( hex2_prev[5] !== hex2_expected_prev[5] )
		&& ((hex2_expected_prev[5] !== last_hex2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[5] = hex2_expected_prev[5];
	end
	if (
		( hex2_expected_prev[6] !== 1'bx ) && ( hex2_prev[6] !== hex2_expected_prev[6] )
		&& ((hex2_expected_prev[6] !== last_hex2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[6] = hex2_expected_prev[6];
	end
	if (
		( hex3_expected_prev[0] !== 1'bx ) && ( hex3_prev[0] !== hex3_expected_prev[0] )
		&& ((hex3_expected_prev[0] !== last_hex3_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[0] = hex3_expected_prev[0];
	end
	if (
		( hex3_expected_prev[1] !== 1'bx ) && ( hex3_prev[1] !== hex3_expected_prev[1] )
		&& ((hex3_expected_prev[1] !== last_hex3_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[1] = hex3_expected_prev[1];
	end
	if (
		( hex3_expected_prev[2] !== 1'bx ) && ( hex3_prev[2] !== hex3_expected_prev[2] )
		&& ((hex3_expected_prev[2] !== last_hex3_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[2] = hex3_expected_prev[2];
	end
	if (
		( hex3_expected_prev[3] !== 1'bx ) && ( hex3_prev[3] !== hex3_expected_prev[3] )
		&& ((hex3_expected_prev[3] !== last_hex3_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[3] = hex3_expected_prev[3];
	end
	if (
		( hex3_expected_prev[4] !== 1'bx ) && ( hex3_prev[4] !== hex3_expected_prev[4] )
		&& ((hex3_expected_prev[4] !== last_hex3_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[4] = hex3_expected_prev[4];
	end
	if (
		( hex3_expected_prev[5] !== 1'bx ) && ( hex3_prev[5] !== hex3_expected_prev[5] )
		&& ((hex3_expected_prev[5] !== last_hex3_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[5] = hex3_expected_prev[5];
	end
	if (
		( hex3_expected_prev[6] !== 1'bx ) && ( hex3_prev[6] !== hex3_expected_prev[6] )
		&& ((hex3_expected_prev[6] !== last_hex3_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[6] = hex3_expected_prev[6];
	end
	if (
		( hex4_expected_prev[0] !== 1'bx ) && ( hex4_prev[0] !== hex4_expected_prev[0] )
		&& ((hex4_expected_prev[0] !== last_hex4_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex4_exp[0] = hex4_expected_prev[0];
	end
	if (
		( hex4_expected_prev[1] !== 1'bx ) && ( hex4_prev[1] !== hex4_expected_prev[1] )
		&& ((hex4_expected_prev[1] !== last_hex4_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex4_exp[1] = hex4_expected_prev[1];
	end
	if (
		( hex4_expected_prev[2] !== 1'bx ) && ( hex4_prev[2] !== hex4_expected_prev[2] )
		&& ((hex4_expected_prev[2] !== last_hex4_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex4_exp[2] = hex4_expected_prev[2];
	end
	if (
		( hex4_expected_prev[3] !== 1'bx ) && ( hex4_prev[3] !== hex4_expected_prev[3] )
		&& ((hex4_expected_prev[3] !== last_hex4_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex4_exp[3] = hex4_expected_prev[3];
	end
	if (
		( hex4_expected_prev[4] !== 1'bx ) && ( hex4_prev[4] !== hex4_expected_prev[4] )
		&& ((hex4_expected_prev[4] !== last_hex4_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex4_exp[4] = hex4_expected_prev[4];
	end
	if (
		( hex4_expected_prev[5] !== 1'bx ) && ( hex4_prev[5] !== hex4_expected_prev[5] )
		&& ((hex4_expected_prev[5] !== last_hex4_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex4_exp[5] = hex4_expected_prev[5];
	end
	if (
		( hex4_expected_prev[6] !== 1'bx ) && ( hex4_prev[6] !== hex4_expected_prev[6] )
		&& ((hex4_expected_prev[6] !== last_hex4_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex4_exp[6] = hex4_expected_prev[6];
	end
	if (
		( t_Aa_expected_prev[0] !== 1'bx ) && ( t_Aa_prev[0] !== t_Aa_expected_prev[0] )
		&& ((t_Aa_expected_prev[0] !== last_t_Aa_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Aa[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Aa_expected_prev);
		$display ("     Real value = %b", t_Aa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_t_Aa_exp[0] = t_Aa_expected_prev[0];
	end
	if (
		( t_Aa_expected_prev[1] !== 1'bx ) && ( t_Aa_prev[1] !== t_Aa_expected_prev[1] )
		&& ((t_Aa_expected_prev[1] !== last_t_Aa_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Aa[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Aa_expected_prev);
		$display ("     Real value = %b", t_Aa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_t_Aa_exp[1] = t_Aa_expected_prev[1];
	end
	if (
		( t_Aa_expected_prev[2] !== 1'bx ) && ( t_Aa_prev[2] !== t_Aa_expected_prev[2] )
		&& ((t_Aa_expected_prev[2] !== last_t_Aa_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Aa[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Aa_expected_prev);
		$display ("     Real value = %b", t_Aa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_t_Aa_exp[2] = t_Aa_expected_prev[2];
	end
	if (
		( t_Aa_expected_prev[3] !== 1'bx ) && ( t_Aa_prev[3] !== t_Aa_expected_prev[3] )
		&& ((t_Aa_expected_prev[3] !== last_t_Aa_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Aa[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Aa_expected_prev);
		$display ("     Real value = %b", t_Aa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_t_Aa_exp[3] = t_Aa_expected_prev[3];
	end
	if (
		( t_Aa_expected_prev[4] !== 1'bx ) && ( t_Aa_prev[4] !== t_Aa_expected_prev[4] )
		&& ((t_Aa_expected_prev[4] !== last_t_Aa_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Aa[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Aa_expected_prev);
		$display ("     Real value = %b", t_Aa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_t_Aa_exp[4] = t_Aa_expected_prev[4];
	end
	if (
		( t_Aa_expected_prev[5] !== 1'bx ) && ( t_Aa_prev[5] !== t_Aa_expected_prev[5] )
		&& ((t_Aa_expected_prev[5] !== last_t_Aa_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Aa[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Aa_expected_prev);
		$display ("     Real value = %b", t_Aa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_t_Aa_exp[5] = t_Aa_expected_prev[5];
	end
	if (
		( t_Aa_expected_prev[6] !== 1'bx ) && ( t_Aa_prev[6] !== t_Aa_expected_prev[6] )
		&& ((t_Aa_expected_prev[6] !== last_t_Aa_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Aa[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Aa_expected_prev);
		$display ("     Real value = %b", t_Aa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_t_Aa_exp[6] = t_Aa_expected_prev[6];
	end
	if (
		( t_Aa_expected_prev[7] !== 1'bx ) && ( t_Aa_prev[7] !== t_Aa_expected_prev[7] )
		&& ((t_Aa_expected_prev[7] !== last_t_Aa_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Aa[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Aa_expected_prev);
		$display ("     Real value = %b", t_Aa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_t_Aa_exp[7] = t_Aa_expected_prev[7];
	end
	if (
		( t_AB_Reg_expected_prev[0] !== 1'bx ) && ( t_AB_Reg_prev[0] !== t_AB_Reg_expected_prev[0] )
		&& ((t_AB_Reg_expected_prev[0] !== last_t_AB_Reg_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_AB_Reg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_AB_Reg_expected_prev);
		$display ("     Real value = %b", t_AB_Reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_t_AB_Reg_exp[0] = t_AB_Reg_expected_prev[0];
	end
	if (
		( t_AB_Reg_expected_prev[1] !== 1'bx ) && ( t_AB_Reg_prev[1] !== t_AB_Reg_expected_prev[1] )
		&& ((t_AB_Reg_expected_prev[1] !== last_t_AB_Reg_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_AB_Reg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_AB_Reg_expected_prev);
		$display ("     Real value = %b", t_AB_Reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_t_AB_Reg_exp[1] = t_AB_Reg_expected_prev[1];
	end
	if (
		( t_AB_RegX_expected_prev[0] !== 1'bx ) && ( t_AB_RegX_prev[0] !== t_AB_RegX_expected_prev[0] )
		&& ((t_AB_RegX_expected_prev[0] !== last_t_AB_RegX_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_AB_RegX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_AB_RegX_expected_prev);
		$display ("     Real value = %b", t_AB_RegX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_t_AB_RegX_exp[0] = t_AB_RegX_expected_prev[0];
	end
	if (
		( t_AB_RegX_expected_prev[1] !== 1'bx ) && ( t_AB_RegX_prev[1] !== t_AB_RegX_expected_prev[1] )
		&& ((t_AB_RegX_expected_prev[1] !== last_t_AB_RegX_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_AB_RegX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_AB_RegX_expected_prev);
		$display ("     Real value = %b", t_AB_RegX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_t_AB_RegX_exp[1] = t_AB_RegX_expected_prev[1];
	end
	if (
		( t_c_expected_prev !== 1'bx ) && ( t_c_prev !== t_c_expected_prev )
		&& ((t_c_expected_prev !== last_t_c_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_c_expected_prev);
		$display ("     Real value = %b", t_c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_t_c_exp = t_c_expected_prev;
	end
	if (
		( t_clk_d_expected_prev !== 1'bx ) && ( t_clk_d_prev !== t_clk_d_expected_prev )
		&& ((t_clk_d_expected_prev !== last_t_clk_d_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_clk_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_clk_d_expected_prev);
		$display ("     Real value = %b", t_clk_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_t_clk_d_exp = t_clk_d_expected_prev;
	end
	if (
		( t_count_PC_expected_prev !== 1'bx ) && ( t_count_PC_prev !== t_count_PC_expected_prev )
		&& ((t_count_PC_expected_prev !== last_t_count_PC_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_count_PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_count_PC_expected_prev);
		$display ("     Real value = %b", t_count_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t_count_PC_exp = t_count_PC_expected_prev;
	end
	if (
		( t_count_SP_expected_prev !== 1'bx ) && ( t_count_SP_prev !== t_count_SP_expected_prev )
		&& ((t_count_SP_expected_prev !== last_t_count_SP_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_count_SP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_count_SP_expected_prev);
		$display ("     Real value = %b", t_count_SP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t_count_SP_exp = t_count_SP_expected_prev;
	end
	if (
		( t_Da_expected_prev[0] !== 1'bx ) && ( t_Da_prev[0] !== t_Da_expected_prev[0] )
		&& ((t_Da_expected_prev[0] !== last_t_Da_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Da[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Da_expected_prev);
		$display ("     Real value = %b", t_Da_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t_Da_exp[0] = t_Da_expected_prev[0];
	end
	if (
		( t_Da_expected_prev[1] !== 1'bx ) && ( t_Da_prev[1] !== t_Da_expected_prev[1] )
		&& ((t_Da_expected_prev[1] !== last_t_Da_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Da[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Da_expected_prev);
		$display ("     Real value = %b", t_Da_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t_Da_exp[1] = t_Da_expected_prev[1];
	end
	if (
		( t_Da_expected_prev[2] !== 1'bx ) && ( t_Da_prev[2] !== t_Da_expected_prev[2] )
		&& ((t_Da_expected_prev[2] !== last_t_Da_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Da[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Da_expected_prev);
		$display ("     Real value = %b", t_Da_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t_Da_exp[2] = t_Da_expected_prev[2];
	end
	if (
		( t_Da_expected_prev[3] !== 1'bx ) && ( t_Da_prev[3] !== t_Da_expected_prev[3] )
		&& ((t_Da_expected_prev[3] !== last_t_Da_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Da[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Da_expected_prev);
		$display ("     Real value = %b", t_Da_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t_Da_exp[3] = t_Da_expected_prev[3];
	end
	if (
		( t_Da_expected_prev[4] !== 1'bx ) && ( t_Da_prev[4] !== t_Da_expected_prev[4] )
		&& ((t_Da_expected_prev[4] !== last_t_Da_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Da[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Da_expected_prev);
		$display ("     Real value = %b", t_Da_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t_Da_exp[4] = t_Da_expected_prev[4];
	end
	if (
		( t_Da_expected_prev[5] !== 1'bx ) && ( t_Da_prev[5] !== t_Da_expected_prev[5] )
		&& ((t_Da_expected_prev[5] !== last_t_Da_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Da[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Da_expected_prev);
		$display ("     Real value = %b", t_Da_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t_Da_exp[5] = t_Da_expected_prev[5];
	end
	if (
		( t_Da_expected_prev[6] !== 1'bx ) && ( t_Da_prev[6] !== t_Da_expected_prev[6] )
		&& ((t_Da_expected_prev[6] !== last_t_Da_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Da[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Da_expected_prev);
		$display ("     Real value = %b", t_Da_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t_Da_exp[6] = t_Da_expected_prev[6];
	end
	if (
		( t_Da_expected_prev[7] !== 1'bx ) && ( t_Da_prev[7] !== t_Da_expected_prev[7] )
		&& ((t_Da_expected_prev[7] !== last_t_Da_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Da[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Da_expected_prev);
		$display ("     Real value = %b", t_Da_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t_Da_exp[7] = t_Da_expected_prev[7];
	end
	if (
		( t_mem_expected_prev[0] !== 1'bx ) && ( t_mem_prev[0] !== t_mem_expected_prev[0] )
		&& ((t_mem_expected_prev[0] !== last_t_mem_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_mem[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_mem_expected_prev);
		$display ("     Real value = %b", t_mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t_mem_exp[0] = t_mem_expected_prev[0];
	end
	if (
		( t_mem_expected_prev[1] !== 1'bx ) && ( t_mem_prev[1] !== t_mem_expected_prev[1] )
		&& ((t_mem_expected_prev[1] !== last_t_mem_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_mem[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_mem_expected_prev);
		$display ("     Real value = %b", t_mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t_mem_exp[1] = t_mem_expected_prev[1];
	end
	if (
		( t_mem_expected_prev[2] !== 1'bx ) && ( t_mem_prev[2] !== t_mem_expected_prev[2] )
		&& ((t_mem_expected_prev[2] !== last_t_mem_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_mem[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_mem_expected_prev);
		$display ("     Real value = %b", t_mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t_mem_exp[2] = t_mem_expected_prev[2];
	end
	if (
		( t_mem_expected_prev[3] !== 1'bx ) && ( t_mem_prev[3] !== t_mem_expected_prev[3] )
		&& ((t_mem_expected_prev[3] !== last_t_mem_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_mem[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_mem_expected_prev);
		$display ("     Real value = %b", t_mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t_mem_exp[3] = t_mem_expected_prev[3];
	end
	if (
		( t_mem_expected_prev[4] !== 1'bx ) && ( t_mem_prev[4] !== t_mem_expected_prev[4] )
		&& ((t_mem_expected_prev[4] !== last_t_mem_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_mem[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_mem_expected_prev);
		$display ("     Real value = %b", t_mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t_mem_exp[4] = t_mem_expected_prev[4];
	end
	if (
		( t_mem_expected_prev[5] !== 1'bx ) && ( t_mem_prev[5] !== t_mem_expected_prev[5] )
		&& ((t_mem_expected_prev[5] !== last_t_mem_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_mem[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_mem_expected_prev);
		$display ("     Real value = %b", t_mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t_mem_exp[5] = t_mem_expected_prev[5];
	end
	if (
		( t_mem_expected_prev[6] !== 1'bx ) && ( t_mem_prev[6] !== t_mem_expected_prev[6] )
		&& ((t_mem_expected_prev[6] !== last_t_mem_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_mem[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_mem_expected_prev);
		$display ("     Real value = %b", t_mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t_mem_exp[6] = t_mem_expected_prev[6];
	end
	if (
		( t_mem_expected_prev[7] !== 1'bx ) && ( t_mem_prev[7] !== t_mem_expected_prev[7] )
		&& ((t_mem_expected_prev[7] !== last_t_mem_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_mem[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_mem_expected_prev);
		$display ("     Real value = %b", t_mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t_mem_exp[7] = t_mem_expected_prev[7];
	end
	if (
		( t_op1_ld_expected_prev !== 1'bx ) && ( t_op1_ld_prev !== t_op1_ld_expected_prev )
		&& ((t_op1_ld_expected_prev !== last_t_op1_ld_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_ld_expected_prev);
		$display ("     Real value = %b", t_op1_ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t_op1_ld_exp = t_op1_ld_expected_prev;
	end
	if (
		( t_op1_out_expected_prev[0] !== 1'bx ) && ( t_op1_out_prev[0] !== t_op1_out_expected_prev[0] )
		&& ((t_op1_out_expected_prev[0] !== last_t_op1_out_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t_op1_out_exp[0] = t_op1_out_expected_prev[0];
	end
	if (
		( t_op1_out_expected_prev[1] !== 1'bx ) && ( t_op1_out_prev[1] !== t_op1_out_expected_prev[1] )
		&& ((t_op1_out_expected_prev[1] !== last_t_op1_out_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t_op1_out_exp[1] = t_op1_out_expected_prev[1];
	end
	if (
		( t_op1_out_expected_prev[2] !== 1'bx ) && ( t_op1_out_prev[2] !== t_op1_out_expected_prev[2] )
		&& ((t_op1_out_expected_prev[2] !== last_t_op1_out_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t_op1_out_exp[2] = t_op1_out_expected_prev[2];
	end
	if (
		( t_op1_out_expected_prev[3] !== 1'bx ) && ( t_op1_out_prev[3] !== t_op1_out_expected_prev[3] )
		&& ((t_op1_out_expected_prev[3] !== last_t_op1_out_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t_op1_out_exp[3] = t_op1_out_expected_prev[3];
	end
	if (
		( t_op1_out_expected_prev[4] !== 1'bx ) && ( t_op1_out_prev[4] !== t_op1_out_expected_prev[4] )
		&& ((t_op1_out_expected_prev[4] !== last_t_op1_out_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t_op1_out_exp[4] = t_op1_out_expected_prev[4];
	end
	if (
		( t_op1_out_expected_prev[5] !== 1'bx ) && ( t_op1_out_prev[5] !== t_op1_out_expected_prev[5] )
		&& ((t_op1_out_expected_prev[5] !== last_t_op1_out_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t_op1_out_exp[5] = t_op1_out_expected_prev[5];
	end
	if (
		( t_op1_out_expected_prev[6] !== 1'bx ) && ( t_op1_out_prev[6] !== t_op1_out_expected_prev[6] )
		&& ((t_op1_out_expected_prev[6] !== last_t_op1_out_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t_op1_out_exp[6] = t_op1_out_expected_prev[6];
	end
	if (
		( t_op1_out_expected_prev[7] !== 1'bx ) && ( t_op1_out_prev[7] !== t_op1_out_expected_prev[7] )
		&& ((t_op1_out_expected_prev[7] !== last_t_op1_out_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_t_op1_out_exp[7] = t_op1_out_expected_prev[7];
	end
	if (
		( t_op2_ld_expected_prev !== 1'bx ) && ( t_op2_ld_prev !== t_op2_ld_expected_prev )
		&& ((t_op2_ld_expected_prev !== last_t_op2_ld_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_ld_expected_prev);
		$display ("     Real value = %b", t_op2_ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_t_op2_ld_exp = t_op2_ld_expected_prev;
	end
	if (
		( t_op2_out_expected_prev[0] !== 1'bx ) && ( t_op2_out_prev[0] !== t_op2_out_expected_prev[0] )
		&& ((t_op2_out_expected_prev[0] !== last_t_op2_out_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_t_op2_out_exp[0] = t_op2_out_expected_prev[0];
	end
	if (
		( t_op2_out_expected_prev[1] !== 1'bx ) && ( t_op2_out_prev[1] !== t_op2_out_expected_prev[1] )
		&& ((t_op2_out_expected_prev[1] !== last_t_op2_out_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_t_op2_out_exp[1] = t_op2_out_expected_prev[1];
	end
	if (
		( t_op2_out_expected_prev[2] !== 1'bx ) && ( t_op2_out_prev[2] !== t_op2_out_expected_prev[2] )
		&& ((t_op2_out_expected_prev[2] !== last_t_op2_out_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_t_op2_out_exp[2] = t_op2_out_expected_prev[2];
	end
	if (
		( t_op2_out_expected_prev[3] !== 1'bx ) && ( t_op2_out_prev[3] !== t_op2_out_expected_prev[3] )
		&& ((t_op2_out_expected_prev[3] !== last_t_op2_out_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_t_op2_out_exp[3] = t_op2_out_expected_prev[3];
	end
	if (
		( t_op2_out_expected_prev[4] !== 1'bx ) && ( t_op2_out_prev[4] !== t_op2_out_expected_prev[4] )
		&& ((t_op2_out_expected_prev[4] !== last_t_op2_out_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_t_op2_out_exp[4] = t_op2_out_expected_prev[4];
	end
	if (
		( t_op2_out_expected_prev[5] !== 1'bx ) && ( t_op2_out_prev[5] !== t_op2_out_expected_prev[5] )
		&& ((t_op2_out_expected_prev[5] !== last_t_op2_out_exp[5]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_t_op2_out_exp[5] = t_op2_out_expected_prev[5];
	end
	if (
		( t_op2_out_expected_prev[6] !== 1'bx ) && ( t_op2_out_prev[6] !== t_op2_out_expected_prev[6] )
		&& ((t_op2_out_expected_prev[6] !== last_t_op2_out_exp[6]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_t_op2_out_exp[6] = t_op2_out_expected_prev[6];
	end
	if (
		( t_op2_out_expected_prev[7] !== 1'bx ) && ( t_op2_out_prev[7] !== t_op2_out_expected_prev[7] )
		&& ((t_op2_out_expected_prev[7] !== last_t_op2_out_exp[7]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_t_op2_out_exp[7] = t_op2_out_expected_prev[7];
	end
	if (
		( t_op_ld_expected_prev !== 1'bx ) && ( t_op_ld_prev !== t_op_ld_expected_prev )
		&& ((t_op_ld_expected_prev !== last_t_op_ld_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_ld_expected_prev);
		$display ("     Real value = %b", t_op_ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_t_op_ld_exp = t_op_ld_expected_prev;
	end
	if (
		( t_op_out_expected_prev[0] !== 1'bx ) && ( t_op_out_prev[0] !== t_op_out_expected_prev[0] )
		&& ((t_op_out_expected_prev[0] !== last_t_op_out_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_t_op_out_exp[0] = t_op_out_expected_prev[0];
	end
	if (
		( t_op_out_expected_prev[1] !== 1'bx ) && ( t_op_out_prev[1] !== t_op_out_expected_prev[1] )
		&& ((t_op_out_expected_prev[1] !== last_t_op_out_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_t_op_out_exp[1] = t_op_out_expected_prev[1];
	end
	if (
		( t_op_out_expected_prev[2] !== 1'bx ) && ( t_op_out_prev[2] !== t_op_out_expected_prev[2] )
		&& ((t_op_out_expected_prev[2] !== last_t_op_out_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_t_op_out_exp[2] = t_op_out_expected_prev[2];
	end
	if (
		( t_op_out_expected_prev[3] !== 1'bx ) && ( t_op_out_prev[3] !== t_op_out_expected_prev[3] )
		&& ((t_op_out_expected_prev[3] !== last_t_op_out_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_t_op_out_exp[3] = t_op_out_expected_prev[3];
	end
	if (
		( t_op_out_expected_prev[4] !== 1'bx ) && ( t_op_out_prev[4] !== t_op_out_expected_prev[4] )
		&& ((t_op_out_expected_prev[4] !== last_t_op_out_exp[4]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_t_op_out_exp[4] = t_op_out_expected_prev[4];
	end
	if (
		( t_op_out_expected_prev[5] !== 1'bx ) && ( t_op_out_prev[5] !== t_op_out_expected_prev[5] )
		&& ((t_op_out_expected_prev[5] !== last_t_op_out_exp[5]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_t_op_out_exp[5] = t_op_out_expected_prev[5];
	end
	if (
		( t_op_out_expected_prev[6] !== 1'bx ) && ( t_op_out_prev[6] !== t_op_out_expected_prev[6] )
		&& ((t_op_out_expected_prev[6] !== last_t_op_out_exp[6]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_t_op_out_exp[6] = t_op_out_expected_prev[6];
	end
	if (
		( t_op_out_expected_prev[7] !== 1'bx ) && ( t_op_out_prev[7] !== t_op_out_expected_prev[7] )
		&& ((t_op_out_expected_prev[7] !== last_t_op_out_exp[7]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_t_op_out_exp[7] = t_op_out_expected_prev[7];
	end
	if (
		( t_OP_sel_expected_prev[0] !== 1'bx ) && ( t_OP_sel_prev[0] !== t_OP_sel_expected_prev[0] )
		&& ((t_OP_sel_expected_prev[0] !== last_t_OP_sel_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_OP_sel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_OP_sel_expected_prev);
		$display ("     Real value = %b", t_OP_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_t_OP_sel_exp[0] = t_OP_sel_expected_prev[0];
	end
	if (
		( t_OP_sel_expected_prev[1] !== 1'bx ) && ( t_OP_sel_prev[1] !== t_OP_sel_expected_prev[1] )
		&& ((t_OP_sel_expected_prev[1] !== last_t_OP_sel_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_OP_sel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_OP_sel_expected_prev);
		$display ("     Real value = %b", t_OP_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_t_OP_sel_exp[1] = t_OP_sel_expected_prev[1];
	end
	if (
		( t_OP_sel_expected_prev[2] !== 1'bx ) && ( t_OP_sel_prev[2] !== t_OP_sel_expected_prev[2] )
		&& ((t_OP_sel_expected_prev[2] !== last_t_OP_sel_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_OP_sel[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_OP_sel_expected_prev);
		$display ("     Real value = %b", t_OP_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_t_OP_sel_exp[2] = t_OP_sel_expected_prev[2];
	end
	if (
		( t_OP_sel_expected_prev[3] !== 1'bx ) && ( t_OP_sel_prev[3] !== t_OP_sel_expected_prev[3] )
		&& ((t_OP_sel_expected_prev[3] !== last_t_OP_sel_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_OP_sel[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_OP_sel_expected_prev);
		$display ("     Real value = %b", t_OP_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_t_OP_sel_exp[3] = t_OP_sel_expected_prev[3];
	end
	if (
		( t_push_pop_expected_prev !== 1'bx ) && ( t_push_pop_prev !== t_push_pop_expected_prev )
		&& ((t_push_pop_expected_prev !== last_t_push_pop_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_push_pop :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_push_pop_expected_prev);
		$display ("     Real value = %b", t_push_pop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_t_push_pop_exp = t_push_pop_expected_prev;
	end
	if (
		( t_sel_MUX_ABCD_expected_prev[0] !== 1'bx ) && ( t_sel_MUX_ABCD_prev[0] !== t_sel_MUX_ABCD_expected_prev[0] )
		&& ((t_sel_MUX_ABCD_expected_prev[0] !== last_t_sel_MUX_ABCD_exp[0]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_MUX_ABCD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_MUX_ABCD_expected_prev);
		$display ("     Real value = %b", t_sel_MUX_ABCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_t_sel_MUX_ABCD_exp[0] = t_sel_MUX_ABCD_expected_prev[0];
	end
	if (
		( t_sel_MUX_ABCD_expected_prev[1] !== 1'bx ) && ( t_sel_MUX_ABCD_prev[1] !== t_sel_MUX_ABCD_expected_prev[1] )
		&& ((t_sel_MUX_ABCD_expected_prev[1] !== last_t_sel_MUX_ABCD_exp[1]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_MUX_ABCD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_MUX_ABCD_expected_prev);
		$display ("     Real value = %b", t_sel_MUX_ABCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_t_sel_MUX_ABCD_exp[1] = t_sel_MUX_ABCD_expected_prev[1];
	end
	if (
		( t_sel_MUX_ABCD_IN_expected_prev[0] !== 1'bx ) && ( t_sel_MUX_ABCD_IN_prev[0] !== t_sel_MUX_ABCD_IN_expected_prev[0] )
		&& ((t_sel_MUX_ABCD_IN_expected_prev[0] !== last_t_sel_MUX_ABCD_IN_exp[0]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_MUX_ABCD_IN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_MUX_ABCD_IN_expected_prev);
		$display ("     Real value = %b", t_sel_MUX_ABCD_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t_sel_MUX_ABCD_IN_exp[0] = t_sel_MUX_ABCD_IN_expected_prev[0];
	end
	if (
		( t_sel_MUX_ABCD_IN_expected_prev[1] !== 1'bx ) && ( t_sel_MUX_ABCD_IN_prev[1] !== t_sel_MUX_ABCD_IN_expected_prev[1] )
		&& ((t_sel_MUX_ABCD_IN_expected_prev[1] !== last_t_sel_MUX_ABCD_IN_exp[1]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_MUX_ABCD_IN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_MUX_ABCD_IN_expected_prev);
		$display ("     Real value = %b", t_sel_MUX_ABCD_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t_sel_MUX_ABCD_IN_exp[1] = t_sel_MUX_ABCD_IN_expected_prev[1];
	end
	if (
		( t_sel_MUX_Da_expected_prev[0] !== 1'bx ) && ( t_sel_MUX_Da_prev[0] !== t_sel_MUX_Da_expected_prev[0] )
		&& ((t_sel_MUX_Da_expected_prev[0] !== last_t_sel_MUX_Da_exp[0]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_MUX_Da[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_MUX_Da_expected_prev);
		$display ("     Real value = %b", t_sel_MUX_Da_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t_sel_MUX_Da_exp[0] = t_sel_MUX_Da_expected_prev[0];
	end
	if (
		( t_sel_MUX_Da_expected_prev[1] !== 1'bx ) && ( t_sel_MUX_Da_prev[1] !== t_sel_MUX_Da_expected_prev[1] )
		&& ((t_sel_MUX_Da_expected_prev[1] !== last_t_sel_MUX_Da_exp[1]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_MUX_Da[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_MUX_Da_expected_prev);
		$display ("     Real value = %b", t_sel_MUX_Da_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t_sel_MUX_Da_exp[1] = t_sel_MUX_Da_expected_prev[1];
	end
	if (
		( t_sel_MUX_MEM_expected_prev[0] !== 1'bx ) && ( t_sel_MUX_MEM_prev[0] !== t_sel_MUX_MEM_expected_prev[0] )
		&& ((t_sel_MUX_MEM_expected_prev[0] !== last_t_sel_MUX_MEM_exp[0]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_MUX_MEM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_MUX_MEM_expected_prev);
		$display ("     Real value = %b", t_sel_MUX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t_sel_MUX_MEM_exp[0] = t_sel_MUX_MEM_expected_prev[0];
	end
	if (
		( t_sel_MUX_MEM_expected_prev[1] !== 1'bx ) && ( t_sel_MUX_MEM_prev[1] !== t_sel_MUX_MEM_expected_prev[1] )
		&& ((t_sel_MUX_MEM_expected_prev[1] !== last_t_sel_MUX_MEM_exp[1]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_MUX_MEM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_MUX_MEM_expected_prev);
		$display ("     Real value = %b", t_sel_MUX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t_sel_MUX_MEM_exp[1] = t_sel_MUX_MEM_expected_prev[1];
	end
	if (
		( t_sel_MUX_MEM_expected_prev[2] !== 1'bx ) && ( t_sel_MUX_MEM_prev[2] !== t_sel_MUX_MEM_expected_prev[2] )
		&& ((t_sel_MUX_MEM_expected_prev[2] !== last_t_sel_MUX_MEM_exp[2]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_MUX_MEM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_MUX_MEM_expected_prev);
		$display ("     Real value = %b", t_sel_MUX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t_sel_MUX_MEM_exp[2] = t_sel_MUX_MEM_expected_prev[2];
	end
	if (
		( t_sel_MUX_ULA_expected_prev[0] !== 1'bx ) && ( t_sel_MUX_ULA_prev[0] !== t_sel_MUX_ULA_expected_prev[0] )
		&& ((t_sel_MUX_ULA_expected_prev[0] !== last_t_sel_MUX_ULA_exp[0]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_MUX_ULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_MUX_ULA_expected_prev);
		$display ("     Real value = %b", t_sel_MUX_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t_sel_MUX_ULA_exp[0] = t_sel_MUX_ULA_expected_prev[0];
	end
	if (
		( t_sel_MUX_ULA_expected_prev[1] !== 1'bx ) && ( t_sel_MUX_ULA_prev[1] !== t_sel_MUX_ULA_expected_prev[1] )
		&& ((t_sel_MUX_ULA_expected_prev[1] !== last_t_sel_MUX_ULA_exp[1]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_MUX_ULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_MUX_ULA_expected_prev);
		$display ("     Real value = %b", t_sel_MUX_ULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t_sel_MUX_ULA_exp[1] = t_sel_MUX_ULA_expected_prev[1];
	end
	if (
		( t_sel_PC_expected_prev[0] !== 1'bx ) && ( t_sel_PC_prev[0] !== t_sel_PC_expected_prev[0] )
		&& ((t_sel_PC_expected_prev[0] !== last_t_sel_PC_exp[0]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_PC_expected_prev);
		$display ("     Real value = %b", t_sel_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t_sel_PC_exp[0] = t_sel_PC_expected_prev[0];
	end
	if (
		( t_sel_PC_expected_prev[1] !== 1'bx ) && ( t_sel_PC_prev[1] !== t_sel_PC_expected_prev[1] )
		&& ((t_sel_PC_expected_prev[1] !== last_t_sel_PC_exp[1]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_PC_expected_prev);
		$display ("     Real value = %b", t_sel_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t_sel_PC_exp[1] = t_sel_PC_expected_prev[1];
	end
	if (
		( t_sel_SP_expected_prev[0] !== 1'bx ) && ( t_sel_SP_prev[0] !== t_sel_SP_expected_prev[0] )
		&& ((t_sel_SP_expected_prev[0] !== last_t_sel_SP_exp[0]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_SP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_SP_expected_prev);
		$display ("     Real value = %b", t_sel_SP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t_sel_SP_exp[0] = t_sel_SP_expected_prev[0];
	end
	if (
		( t_sel_SP_expected_prev[1] !== 1'bx ) && ( t_sel_SP_prev[1] !== t_sel_SP_expected_prev[1] )
		&& ((t_sel_SP_expected_prev[1] !== last_t_sel_SP_exp[1]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_sel_SP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_sel_SP_expected_prev);
		$display ("     Real value = %b", t_sel_SP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t_sel_SP_exp[1] = t_sel_SP_expected_prev[1];
	end
	if (
		( t_W_wr_expected_prev !== 1'bx ) && ( t_W_wr_prev !== t_W_wr_expected_prev )
		&& ((t_W_wr_expected_prev !== last_t_W_wr_exp) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_W_wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_W_wr_expected_prev);
		$display ("     Real value = %b", t_W_wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t_W_wr_exp = t_W_wr_expected_prev;
	end
	if (
		( t_Wa_expected_prev !== 1'bx ) && ( t_Wa_prev !== t_Wa_expected_prev )
		&& ((t_Wa_expected_prev !== last_t_Wa_exp) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_Wa :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_Wa_expected_prev);
		$display ("     Real value = %b", t_Wa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_t_Wa_exp = t_Wa_expected_prev;
	end
	if (
		( t_z_expected_prev !== 1'bx ) && ( t_z_prev !== t_z_expected_prev )
		&& ((t_z_expected_prev !== last_t_z_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_z_expected_prev);
		$display ("     Real value = %b", t_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_t_z_exp = t_z_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address_b;
reg b_bs;
reg clk;
reg r;
reg wren_b;
// wires                                               
wire C;
wire [6:0] hex0;
wire [6:0] hex1;
wire [6:0] hex2;
wire [6:0] hex3;
wire [6:0] hex4;
wire [7:0] t_Aa;
wire [1:0] t_AB_Reg;
wire [1:0] t_AB_RegX;
wire t_c;
wire t_clk_d;
wire t_count_PC;
wire t_count_SP;
wire [7:0] t_Da;
wire [7:0] t_mem;
wire t_op1_ld;
wire [7:0] t_op1_out;
wire t_op2_ld;
wire [7:0] t_op2_out;
wire t_op_ld;
wire [7:0] t_op_out;
wire [3:0] t_OP_sel;
wire t_push_pop;
wire [1:0] t_sel_MUX_ABCD;
wire [1:0] t_sel_MUX_ABCD_IN;
wire [1:0] t_sel_MUX_Da;
wire [2:0] t_sel_MUX_MEM;
wire [1:0] t_sel_MUX_ULA;
wire [1:0] t_sel_PC;
wire [1:0] t_sel_SP;
wire t_W_wr;
wire t_Wa;
wire t_z;
wire Z;

wire sampler;                             

// assign statements (if any)                          
processor i1 (
// port map - connection between master ports and signals/registers   
	.address_b(address_b),
	.b_bs(b_bs),
	.C(C),
	.clk(clk),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.r(r),
	.t_Aa(t_Aa),
	.t_AB_Reg(t_AB_Reg),
	.t_AB_RegX(t_AB_RegX),
	.t_c(t_c),
	.t_clk_d(t_clk_d),
	.t_count_PC(t_count_PC),
	.t_count_SP(t_count_SP),
	.t_Da(t_Da),
	.t_mem(t_mem),
	.t_op1_ld(t_op1_ld),
	.t_op1_out(t_op1_out),
	.t_op2_ld(t_op2_ld),
	.t_op2_out(t_op2_out),
	.t_op_ld(t_op_ld),
	.t_op_out(t_op_out),
	.t_OP_sel(t_OP_sel),
	.t_push_pop(t_push_pop),
	.t_sel_MUX_ABCD(t_sel_MUX_ABCD),
	.t_sel_MUX_ABCD_IN(t_sel_MUX_ABCD_IN),
	.t_sel_MUX_Da(t_sel_MUX_Da),
	.t_sel_MUX_MEM(t_sel_MUX_MEM),
	.t_sel_MUX_ULA(t_sel_MUX_ULA),
	.t_sel_PC(t_sel_PC),
	.t_sel_SP(t_sel_SP),
	.t_W_wr(t_W_wr),
	.t_Wa(t_Wa),
	.t_z(t_z),
	.wren_b(wren_b),
	.Z(Z)
);

// r
initial
begin
	r = 1'b1;
	r = #40000 1'b0;
end 
// address_b[ 7 ]
initial
begin
	address_b[7] = 1'b0;
end 
// address_b[ 6 ]
initial
begin
	address_b[6] = 1'b0;
end 
// address_b[ 5 ]
initial
begin
	address_b[5] = 1'b0;
end 
// address_b[ 4 ]
initial
begin
	address_b[4] = 1'b0;
end 
// address_b[ 3 ]
initial
begin
	address_b[3] = 1'b0;
end 
// address_b[ 2 ]
initial
begin
	address_b[2] = 1'b0;
end 
// address_b[ 1 ]
initial
begin
	address_b[1] = 1'b0;
end 
// address_b[ 0 ]
initial
begin
	address_b[0] = 1'b0;
end 

// wren_b
initial
begin
	wren_b = 1'b0;
end 

// b_bs
initial
begin
	b_bs = 1'b0;
end 

processor_vlg_sample_tst tb_sample (
	.address_b(address_b),
	.b_bs(b_bs),
	.clk(clk),
	.r(r),
	.wren_b(wren_b),
	.sampler_tx(sampler)
);

processor_vlg_check_tst tb_out(
	.C(C),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.t_Aa(t_Aa),
	.t_AB_Reg(t_AB_Reg),
	.t_AB_RegX(t_AB_RegX),
	.t_c(t_c),
	.t_clk_d(t_clk_d),
	.t_count_PC(t_count_PC),
	.t_count_SP(t_count_SP),
	.t_Da(t_Da),
	.t_mem(t_mem),
	.t_op1_ld(t_op1_ld),
	.t_op1_out(t_op1_out),
	.t_op2_ld(t_op2_ld),
	.t_op2_out(t_op2_out),
	.t_op_ld(t_op_ld),
	.t_op_out(t_op_out),
	.t_OP_sel(t_OP_sel),
	.t_push_pop(t_push_pop),
	.t_sel_MUX_ABCD(t_sel_MUX_ABCD),
	.t_sel_MUX_ABCD_IN(t_sel_MUX_ABCD_IN),
	.t_sel_MUX_Da(t_sel_MUX_Da),
	.t_sel_MUX_MEM(t_sel_MUX_MEM),
	.t_sel_MUX_ULA(t_sel_MUX_ULA),
	.t_sel_PC(t_sel_PC),
	.t_sel_SP(t_sel_SP),
	.t_W_wr(t_W_wr),
	.t_Wa(t_Wa),
	.t_z(t_z),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

