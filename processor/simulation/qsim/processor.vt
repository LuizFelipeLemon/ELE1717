// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/01/2019 16:56:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processor_vlg_sample_tst(
	address_b,
	clk,
	data_b,
	r,
	wren_b,
	sampler_tx
);
input [7:0] address_b;
input  clk;
input [7:0] data_b;
input  r;
input  wren_b;
output sampler_tx;

reg sample;
time current_time;
always @(address_b or clk or data_b or r or wren_b)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processor_vlg_check_tst (
	C,
	q_b,
	t_op1_ld,
	t_op1_out,
	t_op2_ld,
	t_op2_out,
	t_op_ld,
	t_op_out,
	Z,
	sampler_rx
);
input  C;
input [7:0] q_b;
input  t_op1_ld;
input [7:0] t_op1_out;
input  t_op2_ld;
input [7:0] t_op2_out;
input  t_op_ld;
input [7:0] t_op_out;
input  Z;
input sampler_rx;

reg  C_expected;
reg [7:0] q_b_expected;
reg  t_op1_ld_expected;
reg [7:0] t_op1_out_expected;
reg  t_op2_ld_expected;
reg [7:0] t_op2_out_expected;
reg  t_op_ld_expected;
reg [7:0] t_op_out_expected;
reg  Z_expected;

reg  C_prev;
reg [7:0] q_b_prev;
reg  t_op1_ld_prev;
reg [7:0] t_op1_out_prev;
reg  t_op2_ld_prev;
reg [7:0] t_op2_out_prev;
reg  t_op_ld_prev;
reg [7:0] t_op_out_prev;
reg  Z_prev;

reg  C_expected_prev;
reg [7:0] q_b_expected_prev;
reg  t_op1_ld_expected_prev;
reg [7:0] t_op1_out_expected_prev;
reg  t_op2_ld_expected_prev;
reg [7:0] t_op2_out_expected_prev;
reg  t_op_ld_expected_prev;
reg [7:0] t_op_out_expected_prev;
reg  Z_expected_prev;

reg  last_C_exp;
reg [7:0] last_q_b_exp;
reg  last_t_op1_ld_exp;
reg [7:0] last_t_op1_out_exp;
reg  last_t_op2_ld_exp;
reg [7:0] last_t_op2_out_exp;
reg  last_t_op_ld_exp;
reg [7:0] last_t_op_out_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_prev = C;
	q_b_prev = q_b;
	t_op1_ld_prev = t_op1_ld;
	t_op1_out_prev = t_op1_out;
	t_op2_ld_prev = t_op2_ld;
	t_op2_out_prev = t_op2_out;
	t_op_ld_prev = t_op_ld;
	t_op_out_prev = t_op_out;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	C_expected_prev = C_expected;
	q_b_expected_prev = q_b_expected;
	t_op1_ld_expected_prev = t_op1_ld_expected;
	t_op1_out_expected_prev = t_op1_out_expected;
	t_op2_ld_expected_prev = t_op2_ld_expected;
	t_op2_out_expected_prev = t_op2_out_expected;
	t_op_ld_expected_prev = t_op_ld_expected;
	t_op_out_expected_prev = t_op_out_expected;
	Z_expected_prev = Z_expected;
end



// expected C
initial
begin
	C_expected = 1'bX;
	C_expected = #999000 1'b0;
end 
// expected q_b[ 7 ]
initial
begin
	q_b_expected[7] = 1'bX;
	q_b_expected[7] = #999000 1'b0;
end 
// expected q_b[ 6 ]
initial
begin
	q_b_expected[6] = 1'bX;
	q_b_expected[6] = #999000 1'b0;
end 
// expected q_b[ 5 ]
initial
begin
	q_b_expected[5] = 1'bX;
	q_b_expected[5] = #999000 1'b0;
end 
// expected q_b[ 4 ]
initial
begin
	q_b_expected[4] = 1'bX;
	q_b_expected[4] = #999000 1'b0;
end 
// expected q_b[ 3 ]
initial
begin
	q_b_expected[3] = 1'bX;
	q_b_expected[3] = #999000 1'b0;
end 
// expected q_b[ 2 ]
initial
begin
	q_b_expected[2] = 1'bX;
	q_b_expected[2] = #999000 1'b0;
end 
// expected q_b[ 1 ]
initial
begin
	q_b_expected[1] = 1'bX;
	q_b_expected[1] = #999000 1'b0;
end 
// expected q_b[ 0 ]
initial
begin
	q_b_expected[0] = 1'bX;
	q_b_expected[0] = #999000 1'b0;
end 

// expected t_op1_ld
initial
begin
	t_op1_ld_expected = 1'bX;
	t_op1_ld_expected = #999000 1'b0;
end 
// expected t_op1_out[ 7 ]
initial
begin
	t_op1_out_expected[7] = 1'bX;
	t_op1_out_expected[7] = #999000 1'b0;
end 
// expected t_op1_out[ 6 ]
initial
begin
	t_op1_out_expected[6] = 1'bX;
	t_op1_out_expected[6] = #999000 1'b0;
end 
// expected t_op1_out[ 5 ]
initial
begin
	t_op1_out_expected[5] = 1'bX;
	t_op1_out_expected[5] = #999000 1'b0;
end 
// expected t_op1_out[ 4 ]
initial
begin
	t_op1_out_expected[4] = 1'bX;
	t_op1_out_expected[4] = #999000 1'b0;
end 
// expected t_op1_out[ 3 ]
initial
begin
	t_op1_out_expected[3] = 1'bX;
	t_op1_out_expected[3] = #999000 1'b0;
end 
// expected t_op1_out[ 2 ]
initial
begin
	t_op1_out_expected[2] = 1'bX;
	t_op1_out_expected[2] = #999000 1'b0;
end 
// expected t_op1_out[ 1 ]
initial
begin
	t_op1_out_expected[1] = 1'bX;
	t_op1_out_expected[1] = #999000 1'b0;
end 
// expected t_op1_out[ 0 ]
initial
begin
	t_op1_out_expected[0] = 1'bX;
	t_op1_out_expected[0] = #999000 1'b0;
end 

// expected t_op2_ld
initial
begin
	t_op2_ld_expected = 1'bX;
	t_op2_ld_expected = #999000 1'b0;
end 
// expected t_op2_out[ 7 ]
initial
begin
	t_op2_out_expected[7] = 1'bX;
	t_op2_out_expected[7] = #999000 1'b0;
end 
// expected t_op2_out[ 6 ]
initial
begin
	t_op2_out_expected[6] = 1'bX;
	t_op2_out_expected[6] = #999000 1'b0;
end 
// expected t_op2_out[ 5 ]
initial
begin
	t_op2_out_expected[5] = 1'bX;
	t_op2_out_expected[5] = #999000 1'b0;
end 
// expected t_op2_out[ 4 ]
initial
begin
	t_op2_out_expected[4] = 1'bX;
	t_op2_out_expected[4] = #999000 1'b0;
end 
// expected t_op2_out[ 3 ]
initial
begin
	t_op2_out_expected[3] = 1'bX;
	t_op2_out_expected[3] = #999000 1'b0;
end 
// expected t_op2_out[ 2 ]
initial
begin
	t_op2_out_expected[2] = 1'bX;
	t_op2_out_expected[2] = #999000 1'b0;
end 
// expected t_op2_out[ 1 ]
initial
begin
	t_op2_out_expected[1] = 1'bX;
	t_op2_out_expected[1] = #999000 1'b0;
end 
// expected t_op2_out[ 0 ]
initial
begin
	t_op2_out_expected[0] = 1'bX;
	t_op2_out_expected[0] = #999000 1'b0;
end 

// expected t_op_ld
initial
begin
	t_op_ld_expected = 1'bX;
	t_op_ld_expected = #999000 1'b0;
end 
// expected t_op_out[ 7 ]
initial
begin
	t_op_out_expected[7] = 1'bX;
	t_op_out_expected[7] = #999000 1'b0;
end 
// expected t_op_out[ 6 ]
initial
begin
	t_op_out_expected[6] = 1'bX;
	t_op_out_expected[6] = #999000 1'b0;
end 
// expected t_op_out[ 5 ]
initial
begin
	t_op_out_expected[5] = 1'bX;
	t_op_out_expected[5] = #999000 1'b0;
end 
// expected t_op_out[ 4 ]
initial
begin
	t_op_out_expected[4] = 1'bX;
	t_op_out_expected[4] = #999000 1'b0;
end 
// expected t_op_out[ 3 ]
initial
begin
	t_op_out_expected[3] = 1'bX;
	t_op_out_expected[3] = #999000 1'b0;
end 
// expected t_op_out[ 2 ]
initial
begin
	t_op_out_expected[2] = 1'bX;
	t_op_out_expected[2] = #999000 1'b0;
end 
// expected t_op_out[ 1 ]
initial
begin
	t_op_out_expected[1] = 1'bX;
	t_op_out_expected[1] = #999000 1'b0;
end 
// expected t_op_out[ 0 ]
initial
begin
	t_op_out_expected[0] = 1'bX;
	t_op_out_expected[0] = #999000 1'b0;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
	Z_expected = #999000 1'b0;
end 
// generate trigger
always @(C_expected or C or q_b_expected or q_b or t_op1_ld_expected or t_op1_ld or t_op1_out_expected or t_op1_out or t_op2_ld_expected or t_op2_ld or t_op2_out_expected or t_op2_out or t_op_ld_expected or t_op_ld or t_op_out_expected or t_op_out or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C = %b | expected q_b = %b | expected t_op1_ld = %b | expected t_op1_out = %b | expected t_op2_ld = %b | expected t_op2_out = %b | expected t_op_ld = %b | expected t_op_out = %b | expected Z = %b | ",C_expected_prev,q_b_expected_prev,t_op1_ld_expected_prev,t_op1_out_expected_prev,t_op2_ld_expected_prev,t_op2_out_expected_prev,t_op_ld_expected_prev,t_op_out_expected_prev,Z_expected_prev);
	$display("| real C = %b | real q_b = %b | real t_op1_ld = %b | real t_op1_out = %b | real t_op2_ld = %b | real t_op2_out = %b | real t_op_ld = %b | real t_op_out = %b | real Z = %b | ",C_prev,q_b_prev,t_op1_ld_prev,t_op1_out_prev,t_op2_ld_prev,t_op2_out_prev,t_op_ld_prev,t_op_out_prev,Z_prev);
`endif
	if (
		( C_expected_prev !== 1'bx ) && ( C_prev !== C_expected_prev )
		&& ((C_expected_prev !== last_C_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp = C_expected_prev;
	end
	if (
		( q_b_expected_prev[0] !== 1'bx ) && ( q_b_prev[0] !== q_b_expected_prev[0] )
		&& ((q_b_expected_prev[0] !== last_q_b_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_b[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_b_expected_prev);
		$display ("     Real value = %b", q_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_b_exp[0] = q_b_expected_prev[0];
	end
	if (
		( q_b_expected_prev[1] !== 1'bx ) && ( q_b_prev[1] !== q_b_expected_prev[1] )
		&& ((q_b_expected_prev[1] !== last_q_b_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_b[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_b_expected_prev);
		$display ("     Real value = %b", q_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_b_exp[1] = q_b_expected_prev[1];
	end
	if (
		( q_b_expected_prev[2] !== 1'bx ) && ( q_b_prev[2] !== q_b_expected_prev[2] )
		&& ((q_b_expected_prev[2] !== last_q_b_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_b[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_b_expected_prev);
		$display ("     Real value = %b", q_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_b_exp[2] = q_b_expected_prev[2];
	end
	if (
		( q_b_expected_prev[3] !== 1'bx ) && ( q_b_prev[3] !== q_b_expected_prev[3] )
		&& ((q_b_expected_prev[3] !== last_q_b_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_b[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_b_expected_prev);
		$display ("     Real value = %b", q_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_b_exp[3] = q_b_expected_prev[3];
	end
	if (
		( q_b_expected_prev[4] !== 1'bx ) && ( q_b_prev[4] !== q_b_expected_prev[4] )
		&& ((q_b_expected_prev[4] !== last_q_b_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_b[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_b_expected_prev);
		$display ("     Real value = %b", q_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_b_exp[4] = q_b_expected_prev[4];
	end
	if (
		( q_b_expected_prev[5] !== 1'bx ) && ( q_b_prev[5] !== q_b_expected_prev[5] )
		&& ((q_b_expected_prev[5] !== last_q_b_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_b[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_b_expected_prev);
		$display ("     Real value = %b", q_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_b_exp[5] = q_b_expected_prev[5];
	end
	if (
		( q_b_expected_prev[6] !== 1'bx ) && ( q_b_prev[6] !== q_b_expected_prev[6] )
		&& ((q_b_expected_prev[6] !== last_q_b_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_b[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_b_expected_prev);
		$display ("     Real value = %b", q_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_b_exp[6] = q_b_expected_prev[6];
	end
	if (
		( q_b_expected_prev[7] !== 1'bx ) && ( q_b_prev[7] !== q_b_expected_prev[7] )
		&& ((q_b_expected_prev[7] !== last_q_b_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_b[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_b_expected_prev);
		$display ("     Real value = %b", q_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_b_exp[7] = q_b_expected_prev[7];
	end
	if (
		( t_op1_ld_expected_prev !== 1'bx ) && ( t_op1_ld_prev !== t_op1_ld_expected_prev )
		&& ((t_op1_ld_expected_prev !== last_t_op1_ld_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_ld_expected_prev);
		$display ("     Real value = %b", t_op1_ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_t_op1_ld_exp = t_op1_ld_expected_prev;
	end
	if (
		( t_op1_out_expected_prev[0] !== 1'bx ) && ( t_op1_out_prev[0] !== t_op1_out_expected_prev[0] )
		&& ((t_op1_out_expected_prev[0] !== last_t_op1_out_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_t_op1_out_exp[0] = t_op1_out_expected_prev[0];
	end
	if (
		( t_op1_out_expected_prev[1] !== 1'bx ) && ( t_op1_out_prev[1] !== t_op1_out_expected_prev[1] )
		&& ((t_op1_out_expected_prev[1] !== last_t_op1_out_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_t_op1_out_exp[1] = t_op1_out_expected_prev[1];
	end
	if (
		( t_op1_out_expected_prev[2] !== 1'bx ) && ( t_op1_out_prev[2] !== t_op1_out_expected_prev[2] )
		&& ((t_op1_out_expected_prev[2] !== last_t_op1_out_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_t_op1_out_exp[2] = t_op1_out_expected_prev[2];
	end
	if (
		( t_op1_out_expected_prev[3] !== 1'bx ) && ( t_op1_out_prev[3] !== t_op1_out_expected_prev[3] )
		&& ((t_op1_out_expected_prev[3] !== last_t_op1_out_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_t_op1_out_exp[3] = t_op1_out_expected_prev[3];
	end
	if (
		( t_op1_out_expected_prev[4] !== 1'bx ) && ( t_op1_out_prev[4] !== t_op1_out_expected_prev[4] )
		&& ((t_op1_out_expected_prev[4] !== last_t_op1_out_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_t_op1_out_exp[4] = t_op1_out_expected_prev[4];
	end
	if (
		( t_op1_out_expected_prev[5] !== 1'bx ) && ( t_op1_out_prev[5] !== t_op1_out_expected_prev[5] )
		&& ((t_op1_out_expected_prev[5] !== last_t_op1_out_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_t_op1_out_exp[5] = t_op1_out_expected_prev[5];
	end
	if (
		( t_op1_out_expected_prev[6] !== 1'bx ) && ( t_op1_out_prev[6] !== t_op1_out_expected_prev[6] )
		&& ((t_op1_out_expected_prev[6] !== last_t_op1_out_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_t_op1_out_exp[6] = t_op1_out_expected_prev[6];
	end
	if (
		( t_op1_out_expected_prev[7] !== 1'bx ) && ( t_op1_out_prev[7] !== t_op1_out_expected_prev[7] )
		&& ((t_op1_out_expected_prev[7] !== last_t_op1_out_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op1_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op1_out_expected_prev);
		$display ("     Real value = %b", t_op1_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_t_op1_out_exp[7] = t_op1_out_expected_prev[7];
	end
	if (
		( t_op2_ld_expected_prev !== 1'bx ) && ( t_op2_ld_prev !== t_op2_ld_expected_prev )
		&& ((t_op2_ld_expected_prev !== last_t_op2_ld_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_ld_expected_prev);
		$display ("     Real value = %b", t_op2_ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_t_op2_ld_exp = t_op2_ld_expected_prev;
	end
	if (
		( t_op2_out_expected_prev[0] !== 1'bx ) && ( t_op2_out_prev[0] !== t_op2_out_expected_prev[0] )
		&& ((t_op2_out_expected_prev[0] !== last_t_op2_out_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_t_op2_out_exp[0] = t_op2_out_expected_prev[0];
	end
	if (
		( t_op2_out_expected_prev[1] !== 1'bx ) && ( t_op2_out_prev[1] !== t_op2_out_expected_prev[1] )
		&& ((t_op2_out_expected_prev[1] !== last_t_op2_out_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_t_op2_out_exp[1] = t_op2_out_expected_prev[1];
	end
	if (
		( t_op2_out_expected_prev[2] !== 1'bx ) && ( t_op2_out_prev[2] !== t_op2_out_expected_prev[2] )
		&& ((t_op2_out_expected_prev[2] !== last_t_op2_out_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_t_op2_out_exp[2] = t_op2_out_expected_prev[2];
	end
	if (
		( t_op2_out_expected_prev[3] !== 1'bx ) && ( t_op2_out_prev[3] !== t_op2_out_expected_prev[3] )
		&& ((t_op2_out_expected_prev[3] !== last_t_op2_out_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_t_op2_out_exp[3] = t_op2_out_expected_prev[3];
	end
	if (
		( t_op2_out_expected_prev[4] !== 1'bx ) && ( t_op2_out_prev[4] !== t_op2_out_expected_prev[4] )
		&& ((t_op2_out_expected_prev[4] !== last_t_op2_out_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_t_op2_out_exp[4] = t_op2_out_expected_prev[4];
	end
	if (
		( t_op2_out_expected_prev[5] !== 1'bx ) && ( t_op2_out_prev[5] !== t_op2_out_expected_prev[5] )
		&& ((t_op2_out_expected_prev[5] !== last_t_op2_out_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_t_op2_out_exp[5] = t_op2_out_expected_prev[5];
	end
	if (
		( t_op2_out_expected_prev[6] !== 1'bx ) && ( t_op2_out_prev[6] !== t_op2_out_expected_prev[6] )
		&& ((t_op2_out_expected_prev[6] !== last_t_op2_out_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_t_op2_out_exp[6] = t_op2_out_expected_prev[6];
	end
	if (
		( t_op2_out_expected_prev[7] !== 1'bx ) && ( t_op2_out_prev[7] !== t_op2_out_expected_prev[7] )
		&& ((t_op2_out_expected_prev[7] !== last_t_op2_out_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op2_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op2_out_expected_prev);
		$display ("     Real value = %b", t_op2_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_t_op2_out_exp[7] = t_op2_out_expected_prev[7];
	end
	if (
		( t_op_ld_expected_prev !== 1'bx ) && ( t_op_ld_prev !== t_op_ld_expected_prev )
		&& ((t_op_ld_expected_prev !== last_t_op_ld_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_ld_expected_prev);
		$display ("     Real value = %b", t_op_ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_t_op_ld_exp = t_op_ld_expected_prev;
	end
	if (
		( t_op_out_expected_prev[0] !== 1'bx ) && ( t_op_out_prev[0] !== t_op_out_expected_prev[0] )
		&& ((t_op_out_expected_prev[0] !== last_t_op_out_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_t_op_out_exp[0] = t_op_out_expected_prev[0];
	end
	if (
		( t_op_out_expected_prev[1] !== 1'bx ) && ( t_op_out_prev[1] !== t_op_out_expected_prev[1] )
		&& ((t_op_out_expected_prev[1] !== last_t_op_out_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_t_op_out_exp[1] = t_op_out_expected_prev[1];
	end
	if (
		( t_op_out_expected_prev[2] !== 1'bx ) && ( t_op_out_prev[2] !== t_op_out_expected_prev[2] )
		&& ((t_op_out_expected_prev[2] !== last_t_op_out_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_t_op_out_exp[2] = t_op_out_expected_prev[2];
	end
	if (
		( t_op_out_expected_prev[3] !== 1'bx ) && ( t_op_out_prev[3] !== t_op_out_expected_prev[3] )
		&& ((t_op_out_expected_prev[3] !== last_t_op_out_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_t_op_out_exp[3] = t_op_out_expected_prev[3];
	end
	if (
		( t_op_out_expected_prev[4] !== 1'bx ) && ( t_op_out_prev[4] !== t_op_out_expected_prev[4] )
		&& ((t_op_out_expected_prev[4] !== last_t_op_out_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_t_op_out_exp[4] = t_op_out_expected_prev[4];
	end
	if (
		( t_op_out_expected_prev[5] !== 1'bx ) && ( t_op_out_prev[5] !== t_op_out_expected_prev[5] )
		&& ((t_op_out_expected_prev[5] !== last_t_op_out_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_t_op_out_exp[5] = t_op_out_expected_prev[5];
	end
	if (
		( t_op_out_expected_prev[6] !== 1'bx ) && ( t_op_out_prev[6] !== t_op_out_expected_prev[6] )
		&& ((t_op_out_expected_prev[6] !== last_t_op_out_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_t_op_out_exp[6] = t_op_out_expected_prev[6];
	end
	if (
		( t_op_out_expected_prev[7] !== 1'bx ) && ( t_op_out_prev[7] !== t_op_out_expected_prev[7] )
		&& ((t_op_out_expected_prev[7] !== last_t_op_out_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t_op_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t_op_out_expected_prev);
		$display ("     Real value = %b", t_op_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_t_op_out_exp[7] = t_op_out_expected_prev[7];
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address_b;
reg clk;
reg [7:0] data_b;
reg r;
reg wren_b;
// wires                                               
wire C;
wire [7:0] q_b;
wire t_op1_ld;
wire [7:0] t_op1_out;
wire t_op2_ld;
wire [7:0] t_op2_out;
wire t_op_ld;
wire [7:0] t_op_out;
wire Z;

wire sampler;                             

// assign statements (if any)                          
processor i1 (
// port map - connection between master ports and signals/registers   
	.address_b(address_b),
	.C(C),
	.clk(clk),
	.data_b(data_b),
	.q_b(q_b),
	.r(r),
	.t_op1_ld(t_op1_ld),
	.t_op1_out(t_op1_out),
	.t_op2_ld(t_op2_ld),
	.t_op2_out(t_op2_out),
	.t_op_ld(t_op_ld),
	.t_op_out(t_op_out),
	.wren_b(wren_b),
	.Z(Z)
);

// r
initial
begin
	r = 1'b1;
	r = #40000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// address_b[ 7 ]
initial
begin
	address_b[7] = 1'b0;
end 
// address_b[ 6 ]
initial
begin
	address_b[6] = 1'b0;
end 
// address_b[ 5 ]
initial
begin
	address_b[5] = 1'b0;
end 
// address_b[ 4 ]
initial
begin
	address_b[4] = 1'b0;
end 
// address_b[ 3 ]
initial
begin
	address_b[3] = 1'b0;
end 
// address_b[ 2 ]
initial
begin
	address_b[2] = 1'b0;
end 
// address_b[ 1 ]
initial
begin
	address_b[1] = 1'b0;
end 
// address_b[ 0 ]
initial
begin
	address_b[0] = 1'b0;
end 
// data_b[ 7 ]
initial
begin
	data_b[7] = 1'b0;
end 
// data_b[ 6 ]
initial
begin
	data_b[6] = 1'b0;
end 
// data_b[ 5 ]
initial
begin
	data_b[5] = 1'b0;
end 
// data_b[ 4 ]
initial
begin
	data_b[4] = 1'b0;
end 
// data_b[ 3 ]
initial
begin
	data_b[3] = 1'b0;
end 
// data_b[ 2 ]
initial
begin
	data_b[2] = 1'b0;
end 
// data_b[ 1 ]
initial
begin
	data_b[1] = 1'b0;
end 
// data_b[ 0 ]
initial
begin
	data_b[0] = 1'b0;
end 

// wren_b
initial
begin
	wren_b = 1'b0;
end 

processor_vlg_sample_tst tb_sample (
	.address_b(address_b),
	.clk(clk),
	.data_b(data_b),
	.r(r),
	.wren_b(wren_b),
	.sampler_tx(sampler)
);

processor_vlg_check_tst tb_out(
	.C(C),
	.q_b(q_b),
	.t_op1_ld(t_op1_ld),
	.t_op1_out(t_op1_out),
	.t_op2_ld(t_op2_ld),
	.t_op2_out(t_op2_out),
	.t_op_ld(t_op_ld),
	.t_op_out(t_op_out),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

